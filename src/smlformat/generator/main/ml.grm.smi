_require "../../../basis.smi"
_require "../../../ml-yacc-lib.smi"
_require "Ast.smi"
_require "AstUtil.smi"
_require "FormatTemplate.smi"

structure MLLrVals = 
struct
  structure Parser =
  struct
    type token (= boxed)
    type stream (= boxed)
    type result = Ast.dec
    type pos = int
    type arg = unit
    exception ParseError
    val makeStream : {lexer:unit -> token} -> stream
    val consStream : token * stream -> stream
    val getStream : stream -> token * stream
    val sameToken : token * token -> bool
    val parse : {lookahead:int,
                 stream:stream,
                 error: (string * pos * pos -> unit),
                 arg: arg}
                -> result * stream
  end
  structure Tokens =
  struct
    type pos = Parser.pos
    type token = Parser.token
    val ASSOCINDICATOR : {cut:bool, direction: FormatTemplate.assocDirection,
                          strength:int} * pos * pos
                         ->  token
    val FORMATINDICATOR : {newline:{priority: FormatTemplate.priority} option,
                           space:bool} * pos * pos
                          ->  token
    val STARTOFINDENT : int * pos * pos ->  token
    val NEWLINE : pos * pos ->  token
    val LOCALFORMATTAG : string * pos * pos ->  token
    val FORMATTAG : pos * pos ->  token
    val HEADERTAG : pos * pos ->  token
    val DESTINATIONTAG : pos * pos ->  token
    val FORMATPARAMSTAG : pos * pos ->  token
    val FORMATTERTAG : pos * pos ->  token
    val PREFIXTAG : pos * pos ->  token
    val DITTOTAG : pos * pos ->  token
    val FORMATCOMMENTEND : pos * pos ->  token
    val FORMATCOMMENTSTART : pos * pos ->  token
    val AQID : string * pos * pos ->  token
    val OBJL : string * pos * pos ->  token
    val ENDQ : string * pos * pos ->  token
    val BEGINQ : pos * pos ->  token
    val VECTORSTART : pos * pos ->  token
    val FUNSIG : pos * pos ->  token
    val ANDALSO : pos * pos ->  token
    val ORELSE : pos * pos ->  token
    val RPAREN : pos * pos ->  token
    val RBRACKET : pos * pos ->  token
    val RBRACE : pos * pos ->  token
    val LPAREN : pos * pos ->  token
    val LBRACKET : pos * pos ->  token
    val LBRACE : pos * pos ->  token
    val COMMA : pos * pos ->  token
    val COLONGT : pos * pos ->  token
    val COLON : pos * pos ->  token
    val ASTERISK : pos * pos ->  token
    val USEOBJ : pos * pos ->  token
    val STDCALL : pos * pos ->  token
    val SIZEOF : pos * pos ->  token
    val IMPORT : pos * pos ->  token
    val FFIAPPLY : pos * pos ->  token
    val EXTERNAL : pos * pos ->  token
    val EXPORT : pos * pos ->  token
    val DOUBLE : pos * pos ->  token
    val CDECL : pos * pos ->  token
    val CAST : pos * pos ->  token
    val BOXED : pos * pos ->  token
    val ATOM : pos * pos ->  token
    val WITHTYPE : pos * pos ->  token
    val WITH : pos * pos ->  token
    val WILD : pos * pos ->  token
    val WHILE : pos * pos ->  token
    val WHERE : pos * pos ->  token
    val VAL : pos * pos ->  token
    val TYPE : pos * pos ->  token
    val THEN : pos * pos ->  token
    val STRUCTURE : pos * pos ->  token
    val STRUCT : pos * pos ->  token
    val SIGNATURE : pos * pos ->  token
    val SIG : pos * pos ->  token
    val SHARING : pos * pos ->  token
    val REC : pos * pos ->  token
    val RAISE : pos * pos ->  token
    val OVERLOAD : pos * pos ->  token
    val OPEN : pos * pos ->  token
    val OP : pos * pos ->  token
    val OF : pos * pos ->  token
    val NONFIX : pos * pos ->  token
    val LOCAL : pos * pos ->  token
    val LET : pos * pos ->  token
    val LAZY : pos * pos ->  token
    val INFIXR : pos * pos ->  token
    val INFIX : pos * pos ->  token
    val INCLUDE : pos * pos ->  token
    val IN : pos * pos ->  token
    val IF : pos * pos ->  token
    val HASH : pos * pos ->  token
    val HANDLE : pos * pos ->  token
    val FUNCTOR : pos * pos ->  token
    val FUN : pos * pos ->  token
    val FN : pos * pos ->  token
    val DARROW : pos * pos ->  token
    val DOT : pos * pos ->  token
    val DO : pos * pos ->  token
    val EXCEPTION : pos * pos ->  token
    val EQTYPE : pos * pos ->  token
    val EQUALOP : pos * pos ->  token
    val END : pos * pos ->  token
    val ELSE : pos * pos ->  token
    val DOTDOTDOT : pos * pos ->  token
    val DATATYPE : pos * pos ->  token
    val CASE : pos * pos ->  token
    val BAR : pos * pos ->  token
    val AS : pos * pos ->  token
    val ARROW : pos * pos ->  token
    val AND : pos * pos ->  token
    val ABSTYPE : pos * pos ->  token
    val CHAR : string * pos * pos ->  token
    val STRING : string * pos * pos ->  token
    val REAL : string * pos * pos ->  token
    val WORD : int * pos * pos ->  token
    val INT0 : int * pos * pos ->  token
    val INT : int * pos * pos ->  token
    val TYVAR : string * pos * pos ->  token
    val ID : string * pos * pos ->  token
    val SEMICOLON : pos * pos ->  token
    val EOF : pos * pos ->  token
  end
end
