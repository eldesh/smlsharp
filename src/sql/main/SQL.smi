_require "SQLPrim.smi"
_require "SQLUtils.smi"
_require "Backend.smi"
_require "builtintypes/timestamp/TimeStamp.smi"
_require "builtintypes/decimal/Decimal.smi"
_require "builtintypes/float/Float.smi"

structure SQL =
struct
  type backend = SMLSharp_SQL_Prim.backend
  type 'a server = 'a SMLSharp_SQL_Prim.server
  type ('a,'b) value = ('a,'b) SMLSharp_SQL_Prim.value
  type 'a conn = 'a SMLSharp_SQL_Prim.conn
  type ('a,'b) db = ('a,'b) SMLSharp_SQL_Prim.db
  type ('a,'b) table = ('a,'b) SMLSharp_SQL_Prim.table
  type ('a,'b) row = ('a,'b) SMLSharp_SQL_Prim.row
  type 'a query = 'a SMLSharp_SQL_Prim.query
  type command = SMLSharp_SQL_Prim.command
  type 'a rel = 'a SMLSharp_SQL_Prim.rel
  type decimal = SMLSharp_SQL_Prim.decimal
  type timestamp = SMLSharp_SQL_Prim.timestamp
  type float = SMLSharp_SQL_Prim.float

  structure TimeStamp = SMLSharp_SQL_TimeStamp
  structure Decimal = SMLSharp_SQL_Decimal
  structure Float = SMLSharp_SQL_Float

  exception Format = SMLSharp_SQL_Prim.Format
  exception Exec = SMLSharp_SQL_Prim.Exec
  exception Connect = SMLSharp_SQL_Prim.Connect
  exception Link = SMLSharp_SQL_Prim.Link

  val postgresql : string -> backend
  val mysql : string -> backend
  val odbc : string -> backend

  val connect : 'a server -> 'a conn
  val fetch : 'a rel -> ('a * 'a rel) option
  val closeConn : 'a conn -> unit
  val closeRel : 'a rel -> unit
  val subquery : (('a,'b) db -> 'c query) -> ('a,'b) db -> ('c,'b) table
  val exists : (('a,'b) db -> 'c query) -> ('a,'b) db -> (bool option, 'b) value
  val Some : ('a, 'b) value -> ('a option, 'b) value
  val Null : ('a option, 'b) value

  val queryString : (('a,'b) db -> 'c query) -> 'a server -> string
  val commandString : (('a,'b) db -> command) -> 'a server -> string

  val + =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.add
      | intInf => SMLSharp_SQL_Prim.add
      | word => SMLSharp_SQL_Prim.add
      | real => SMLSharp_SQL_Prim.add
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.add
        | intInf => SMLSharp_SQL_Prim.add
        | word => SMLSharp_SQL_Prim.add
        | real => SMLSharp_SQL_Prim.add

  val - =
      case 'a in ('a, 'b) value * ('a, 'b) value -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.sub
      | intInf => SMLSharp_SQL_Prim.sub
      | word => SMLSharp_SQL_Prim.sub
      | real => SMLSharp_SQL_Prim.sub
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.sub
        | intInf => SMLSharp_SQL_Prim.sub
        | word => SMLSharp_SQL_Prim.sub
        | real => SMLSharp_SQL_Prim.sub

  val * =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.mul
      | intInf => SMLSharp_SQL_Prim.mul
      | word => SMLSharp_SQL_Prim.mul
      | real => SMLSharp_SQL_Prim.mul
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.mul
        | intInf => SMLSharp_SQL_Prim.mul
        | word => SMLSharp_SQL_Prim.mul
        | real => SMLSharp_SQL_Prim.mul

  val / =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.div
      | intInf => SMLSharp_SQL_Prim.div
      | word => SMLSharp_SQL_Prim.div
      | real => SMLSharp_SQL_Prim.div
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.div
        | intInf => SMLSharp_SQL_Prim.div
        | word => SMLSharp_SQL_Prim.div
        | real => SMLSharp_SQL_Prim.div

  val div =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.div
      | intInf => SMLSharp_SQL_Prim.div
      | word => SMLSharp_SQL_Prim.div
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.div
        | intInf => SMLSharp_SQL_Prim.div
        | word => SMLSharp_SQL_Prim.div

  val mod =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.mod
      | intInf => SMLSharp_SQL_Prim.mod
      | word => SMLSharp_SQL_Prim.mod
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.mod
        | intInf => SMLSharp_SQL_Prim.mod
        | word => SMLSharp_SQL_Prim.mod

  val neg =
      case 'a in
        ('a, 'b) value -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.neg
      | intInf => SMLSharp_SQL_Prim.neg
      | word => SMLSharp_SQL_Prim.neg
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.neg
        | intInf => SMLSharp_SQL_Prim.neg
        | word => SMLSharp_SQL_Prim.neg

  val abs =
      case 'a in
        ('a, 'b) value -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.abs
      | intInf => SMLSharp_SQL_Prim.abs
      | word => SMLSharp_SQL_Prim.abs
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.abs
        | intInf => SMLSharp_SQL_Prim.abs
        | word => SMLSharp_SQL_Prim.abs

  val < =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> (bool option, 'b) value
      of
        int => SMLSharp_SQL_Prim.lt
      | intInf => SMLSharp_SQL_Prim.lt
      | word => SMLSharp_SQL_Prim.lt
      | char => SMLSharp_SQL_Prim.lt
      | string => SMLSharp_SQL_Prim.lt
      | real => SMLSharp_SQL_Prim.lt
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value
          -> (bool option, 'b) value
        of
          int => SMLSharp_SQL_Prim.lt
        | intInf => SMLSharp_SQL_Prim.lt
        | word => SMLSharp_SQL_Prim.lt
        | char => SMLSharp_SQL_Prim.lt
        | bool => SMLSharp_SQL_Prim.lt
        | string => SMLSharp_SQL_Prim.lt
        | real => SMLSharp_SQL_Prim.lt

  val <= =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> (bool option, 'b) value
      of
        int => SMLSharp_SQL_Prim.le
      | intInf => SMLSharp_SQL_Prim.le
      | word => SMLSharp_SQL_Prim.le
      | char => SMLSharp_SQL_Prim.le
      | string => SMLSharp_SQL_Prim.le
      | real => SMLSharp_SQL_Prim.le
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value
          -> (bool option, 'b) value
        of
          int => SMLSharp_SQL_Prim.le
        | intInf => SMLSharp_SQL_Prim.le
        | word => SMLSharp_SQL_Prim.le
        | char => SMLSharp_SQL_Prim.le
        | bool => SMLSharp_SQL_Prim.le
        | string => SMLSharp_SQL_Prim.le
        | real => SMLSharp_SQL_Prim.le

  val > =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> (bool option, 'b) value
      of
        int => SMLSharp_SQL_Prim.gt
      | intInf => SMLSharp_SQL_Prim.gt
      | word => SMLSharp_SQL_Prim.gt
      | char => SMLSharp_SQL_Prim.gt
      | string => SMLSharp_SQL_Prim.gt
      | real => SMLSharp_SQL_Prim.gt
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value
          -> (bool option, 'b) value
        of
          int => SMLSharp_SQL_Prim.gt
        | intInf => SMLSharp_SQL_Prim.gt
        | word => SMLSharp_SQL_Prim.gt
        | char => SMLSharp_SQL_Prim.gt
        | bool => SMLSharp_SQL_Prim.gt
        | string => SMLSharp_SQL_Prim.gt
        | real => SMLSharp_SQL_Prim.gt

  val >= =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> (bool option, 'b) value
      of
        int => SMLSharp_SQL_Prim.ge
      | intInf => SMLSharp_SQL_Prim.ge
      | word => SMLSharp_SQL_Prim.ge
      | char => SMLSharp_SQL_Prim.ge
      | string => SMLSharp_SQL_Prim.ge
      | real => SMLSharp_SQL_Prim.ge
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value
          -> (bool option, 'b) value
        of
          int => SMLSharp_SQL_Prim.ge
        | intInf => SMLSharp_SQL_Prim.ge
        | word => SMLSharp_SQL_Prim.ge
        | char => SMLSharp_SQL_Prim.ge
        | bool => SMLSharp_SQL_Prim.ge
        | string => SMLSharp_SQL_Prim.ge
        | real => SMLSharp_SQL_Prim.ge

  val == =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> (bool option, 'b) value
      of
        int => SMLSharp_SQL_Prim.eq
      | intInf => SMLSharp_SQL_Prim.eq
      | word => SMLSharp_SQL_Prim.eq
      | char => SMLSharp_SQL_Prim.eq
      | string => SMLSharp_SQL_Prim.eq
      | real => SMLSharp_SQL_Prim.eq
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value
          -> (bool option, 'b) value
        of
          int => SMLSharp_SQL_Prim.eq
        | intInf => SMLSharp_SQL_Prim.eq
        | word => SMLSharp_SQL_Prim.eq
        | char => SMLSharp_SQL_Prim.eq
        | bool => SMLSharp_SQL_Prim.eq
        | string => SMLSharp_SQL_Prim.eq
        | real => SMLSharp_SQL_Prim.eq

  val <> =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> (bool option, 'b) value
      of
        int => SMLSharp_SQL_Prim.neq
      | intInf => SMLSharp_SQL_Prim.neq
      | word => SMLSharp_SQL_Prim.neq
      | char => SMLSharp_SQL_Prim.neq
      | string => SMLSharp_SQL_Prim.neq
      | real => SMLSharp_SQL_Prim.neq
      | 'c option =>
        case 'c in
          ('c option, 'b) value * ('c option, 'b) value
          -> (bool option, 'b) value
        of
          int => SMLSharp_SQL_Prim.neq
        | intInf => SMLSharp_SQL_Prim.neq
        | word => SMLSharp_SQL_Prim.neq
        | char => SMLSharp_SQL_Prim.neq
        | bool => SMLSharp_SQL_Prim.neq
        | string => SMLSharp_SQL_Prim.neq
        | real => SMLSharp_SQL_Prim.neq

  val ^ : (string, 'a) value * (string, 'a) value -> (string, 'a) value

  val andAlso
      : (bool option, 'a) value * (bool option, 'a) value
        -> (bool option, 'a) value
  val orElse
      : (bool option, 'a) value * (bool option, 'a) value
        -> (bool option, 'a) value
  val not
      : (bool option, 'a) value -> (bool option, 'a) value

  val isNull
      : ('a option, 'a) value -> (bool option, 'a) value
  val isNotNull
      : ('a option, 'a) value -> (bool option, 'a) value

  val like =
      case 'a in
        ('a, 'b) value * ('a, 'b) value -> (bool option, 'b) value
      of
        string => SMLSharp_SQL_Prim.likeString
      | string option => SMLSharp_SQL_Prim.likeStringOption

  val toSQL =
      case 'a in
        'a -> ('a, 'b) value
      of
        int => SMLSharp_SQL_Prim.toSQL_int
      | intInf => SMLSharp_SQL_Prim.toSQL_intInf
      | word => SMLSharp_SQL_Prim.toSQL_word
      | char => SMLSharp_SQL_Prim.toSQL_char
      | string => SMLSharp_SQL_Prim.toSQL_string
      | real => SMLSharp_SQL_Prim.toSQL_real
      | timestamp => SMLSharp_SQL_Prim.toSQL_timestamp
      | 'c option =>
        case 'c in
          'c option -> ('c option, 'b) value
        of
          int => SMLSharp_SQL_Prim.toSQL_intOption
        | intInf => SMLSharp_SQL_Prim.toSQL_intInfOption
        | word => SMLSharp_SQL_Prim.toSQL_wordOption
        | char => SMLSharp_SQL_Prim.toSQL_charOption
        | bool => SMLSharp_SQL_Prim.toSQL_boolOption
        | string => SMLSharp_SQL_Prim.toSQL_stringOption
        | real => SMLSharp_SQL_Prim.toSQL_realOption
        | timestamp => SMLSharp_SQL_Prim.toSQL_timestampOption

  exception NotOne = SMLSharp_SQL_Utils.NotOne
  val fetchAll : 'a rel -> 'a list
  val fetchOne : 'a rel -> 'a

end
