_require "./General.smi"
_require "./StringCvt.smi"
_require "./SMLSharp_ScanChar.smi"
_require "./String.smi"

structure IntInf =
struct
  type int = SMLSharp_Builtin.IntInf.int
  val toLarge : int -> SMLSharp_Builtin.IntInf.int
  val fromLarge : SMLSharp_Builtin.IntInf.int -> int
  val toInt : int -> SMLSharp_Builtin.Int.int
  val fromInt : SMLSharp_Builtin.Int.int -> int
  val precision : SMLSharp_Builtin.Int.int option
  val minInt : int option
  val maxInt : int option
  val + : int * int -> int
  val - : int * int -> int
  val * : int * int -> int
  val div : int * int -> int
  val mod : int * int -> int
  val quot : int * int -> int
  val rem : int * int -> int
  val compare : int * int -> General.order
  val < : int * int -> bool
  val <= : int * int -> bool
  val > : int * int -> bool
  val >= : int * int -> bool
  val ~ : int -> int
  val abs : int -> int
  val min : int * int -> int
  val max : int * int -> int
  val sign : int -> SMLSharp_Builtin.Int.int
  val sameSign : int * int -> bool
  val fmt : StringCvt.radix -> int -> string
  val toString : int -> string
  val scan : StringCvt.radix
             -> (char, 'a) StringCvt.reader
             -> (int, 'a) StringCvt.reader
  val fromString : string -> int option

  val divMod : int * int -> int * int
  val quotRem : int * int -> int * int
  val pow : int * SMLSharp_Builtin.Int.int -> int
  val log2 : int -> SMLSharp_Builtin.Int.int
  val orb : int * int -> int
  val xorb : int * int -> int
  val andb : int * int -> int
  val notb : int -> int
  val << : int * word -> int
  val ~>> : int * word -> int
end

structure LargeInt = IntInf
