_require "./General.smi"
_require "./StringCvt.smi"
_require "./SMLSharp_ScanChar.smi"
_require "./IntInf.smi"
_require "./String.smi"

structure Word =
struct
  type word = word
  val wordSize : int
  val toLarge : word -> SMLSharp_Builtin.Word.word
  val toLargeX : word -> SMLSharp_Builtin.Word.word
  val toLargeWord = toLarge
  val toLargeWordX = toLargeX
  val fromLarge : SMLSharp_Builtin.Word.word -> word
  val fromLargeWord = fromLarge
  val toLargeInt : word -> LargeInt.int
  val toLargeIntX : word -> LargeInt.int
  val fromLargeInt : LargeInt.int -> word
  val toInt = SMLSharp_Builtin.Word.toInt
  val toIntX = SMLSharp_Builtin.Word.toIntX
  val fromInt = SMLSharp_Builtin.Word.fromInt
  val andb = SMLSharp_Builtin.Word.andb
  val orb = SMLSharp_Builtin.Word.orb
  val xorb = SMLSharp_Builtin.Word.xorb
  val notb = SMLSharp_Builtin.Word.notb
  val << = SMLSharp_Builtin.Word.lshift
  val >> = SMLSharp_Builtin.Word.rshift
  val ~>> = SMLSharp_Builtin.Word.arshift
  val + = SMLSharp_Builtin.Word.add
  val - = SMLSharp_Builtin.Word.sub
  val * = SMLSharp_Builtin.Word.mul
  val div = SMLSharp_Builtin.Word.div
  val mod = SMLSharp_Builtin.Word.mod
  val compare : word * word -> General.order
  val < = SMLSharp_Builtin.Word.lt
  val <= = SMLSharp_Builtin.Word.lteq
  val > = SMLSharp_Builtin.Word.gt
  val >= = SMLSharp_Builtin.Word.gteq
  val ~ = SMLSharp_Builtin.Word.neg
  val min : word * word -> word
  val max : word * word -> word
  val fmt : StringCvt.radix -> word -> string
  val toString : word -> string
  val scan : StringCvt.radix
             -> (char, 'a) StringCvt.reader
             -> (word, 'a) StringCvt.reader
  val fromString : string -> word option
end

structure Word32 = Word
structure LargeWord = Word
