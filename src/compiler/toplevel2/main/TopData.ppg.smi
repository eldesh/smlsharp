_require "basis.smi"
_require "smlformat-lib.smi"
_require "../../control/main/Bug.ppg.smi"
_require "../../absyn/main/AbsynInterface.ppg.smi"
_require "../../toolchain/main/Filename.smi"
_require "../../absyn/main/Absyn.ppg.smi"
_require "../../util/main/TermFormat.smi"
_require "../../nameevaluation/main/NameEvalEnv.ppg.smi"
_require "../../types/main/IDCalc.ppg.smi"
_require "../../elaborate/main/Elaborator.smi"
_require "../../../llvm/main/LLVM.smi"

structure TopData =
struct

  datatype stopAt =
      SyntaxCheck                   (* run until syntax check is completed. *)
    | ErrorCheck                    (* run until error check is completed. *)
    | NoStop

  type options =
      {
        stopAt: stopAt,                         (* compile will stop here. *)
        baseFilename: Filename.filename option, (* base name for file search *)
        stdPath: Filename.filename list,        (* system path for file search *)
        loadPath: Filename.filename list        (* user path for file search *)
      }

  type toplevelContext =
      {
        topEnv: NameEvalEnv.topEnv,
        version: int option,
        fixEnv: Elaborator.fixEnv,
        builtinDecls: IDCalc.icdecl list
      }
  type newContext =
      {
        topEnv: NameEvalEnv.topEnv,
        fixEnv: Elaborator.fixEnv
      }

  datatype result =
      STOPPED                                   (* aborted due to stopAt. *)
    | RETURN of newContext * LLVM.LLVMModuleRef (* compile completed *)

  val debugPrint : string -> unit
  val printStopAt : stopAt -> unit
  val printInterfaceName : AbsynInterface.interfaceName -> unit
  val printFileName : Filename.filename -> unit
  val printInterfaceNameList : AbsynInterface.interfaceName list -> unit
  val printResult : result -> unit
  val printOptions : options -> unit
  val printCompileUnit : AbsynInterface.compileUnit -> unit
end
