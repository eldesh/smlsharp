_require "basis.smi"
_require "smlformat-lib.smi"
_require "../../../compiler-utils/env/main/LabelEnv.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "../../builtin2/main/BuiltinPrimitive.ppg.smi"
_require "../../util/main/TermFormat.smi"
_require "../../absyn/main/Absyn.ppg.smi"
_require "../../types/main/Types.ppg.smi"
_require "../../typedcalc/main/TypedCalc.ppg.smi"
_require "../../runtimetypes/main/FFIAttributes.ppg.smi"

structure RecordCalc =
  struct
    type path = string list
    val format_path : path -> TermFormat.format
    type varInfo = {path:path, id:VarID.id, ty:Types.ty}
    val format_varInfo
        : varInfo -> SMLFormat.FormatExpression.expression list
    val formatWithType_varInfo
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> {id:VarID.id, path:string list, ty:Types.ty}
          -> SMLFormat.FormatExpression.expression list
    type exVarInfo = {path:path, ty:Types.ty}
    val format_exVarInfo
        : exVarInfo
          -> SMLFormat.FormatExpression.expression list
    val formatWithType_exVarInfo
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> exVarInfo
          -> SMLFormat.FormatExpression.expression list
    type conInfo = {path: path, ty:Types.ty, id: ConID.id}
    val format_conInfo
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> conInfo
          -> SMLFormat.FormatExpression.expression list
    val formatWithType_conInfo
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> conInfo
          -> SMLFormat.FormatExpression.expression list
    type exnInfo = {path: path, ty:Types.ty, id: ExnID.id}
    val format_exnInfo
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> exnInfo
          -> SMLFormat.FormatExpression.expression list
    val formatWithType_exnInfo
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> exnInfo
          -> SMLFormat.FormatExpression.expression list

    type exExnInfo = {path: path, ty:Types.ty}
    val format_exExnInfo
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> exExnInfo
          -> SMLFormat.FormatExpression.expression list
    val formatWithType_exExnInfo
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> exExnInfo
          -> SMLFormat.FormatExpression.expression list

    type oprimInfo = {ty : Types.ty, path: path, id : OPrimID.id}
    val format_oprimInfo
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> oprimInfo
          -> SMLFormat.FormatExpression.expression list
    val formatWithType_oprimInfo
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> oprimInfo
          -> SMLFormat.FormatExpression.expression list

  datatype exnCon 
    = EXN of exnInfo
    | EXEXN of exExnInfo
    val format_exnCon
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> exnCon
          -> SMLFormat.FormatExpression.expression list
    val formatWithType_exnCon
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> exnCon
          -> SMLFormat.FormatExpression.expression list

    datatype rcexp
      = RCAPPM of {argExpList:rcexp list, funExp:rcexp, funTy:Types.ty, loc:Loc.loc}
      | RCCASE of {defaultExp:rcexp, exp:rcexp, expTy:Types.ty, loc:Loc.loc,
                   ruleList:(conInfo * varInfo option * rcexp) list,
                   resultTy:Types.ty}
      | RCCAST of (rcexp * Types.ty) * Types.ty * Loc.loc
      | RCCONSTANT of {const:Absyn.constant, loc:Loc.loc, ty:Types.ty}
      | RCDATACONSTRUCT of {argExpOpt:rcexp option, con:conInfo,
                            argTyOpt:Types.ty option,
                            instTyList:Types.ty list, loc:Loc.loc}
      | RCEXNCASE of {defaultExp:rcexp, exp:rcexp, expTy:Types.ty, loc:Loc.loc,
                      ruleList:(exnCon * varInfo option * rcexp) list,
                      resultTy:Types.ty}
      | RCEXNCONSTRUCT of {argExpOpt:rcexp option, exn:exnCon,
                           instTyList:Types.ty list, loc:Loc.loc}
      | RCEXN_CONSTRUCTOR of {exnInfo:exnInfo, loc:Loc.loc}
      | RCEXEXN_CONSTRUCTOR of {exExnInfo:exExnInfo, loc:Loc.loc}
      | RCCALLBACKFN of {attributes : FFIAttributes.attributes,
                         resultTy : Types.ty option,
                         argVarList : varInfo list,
                         bodyExp : rcexp, loc : Loc.loc}
      | RCEXVAR of exVarInfo
      | RCFFI of rcffiexp * Types.ty * Loc.loc
      | RCFNM of {argVarList:varInfo list, bodyExp:rcexp, bodyTy:Types.ty, loc:Loc.loc}
      | RCFOREIGNAPPLY of {argExpList:rcexp list,
                           attributes:FFIAttributes.attributes, funExp:rcexp,
                           resultTy:Types.ty option,
                           loc:Loc.loc}
      | RCFOREIGNSYMBOL of {loc:Loc.loc, name:string, ty:Types.ty}
      | RCHANDLE of {exnVar:varInfo, exp:rcexp, handler:rcexp, resultTy:Types.ty, loc:Loc.loc}
      | RCINDEXOF of string * Types.ty * Loc.loc
      | RCLET of {body:rcexp list, decls:rcdecl list, loc:Loc.loc, tys:Types.ty list}
      | RCMODIFY of {elementExp:rcexp, elementTy:Types.ty, indexExp:rcexp,
                     label:string, loc:Loc.loc, recordExp:rcexp, recordTy:Types.ty}
      | RCMONOLET of {binds:(varInfo * rcexp) list, bodyExp:rcexp, loc:Loc.loc}
      | RCOPRIMAPPLY of {argExp:rcexp, instTyList:Types.ty list, loc:Loc.loc,
                         oprimOp:oprimInfo}
      | RCPOLY of {btvEnv:Types.btvEnv, exp:rcexp, expTyWithoutTAbs:Types.ty, loc:Loc.loc}
      | RCPOLYFNM of {argVarList:varInfo list, bodyExp:rcexp, bodyTy:Types.ty,
                      btvEnv:Types.btvEnv, loc:Loc.loc}
      | RCPRIMAPPLY of {argExp:rcexp, instTyList:Types.ty list, loc:Loc.loc,
                        primOp:Types.primInfo}
      | RCRAISE of {exp:rcexp, loc:Loc.loc, ty:Types.ty}
      | RCRECORD of {fields:rcexp LabelEnv.map, loc:Loc.loc, recordTy:Types.ty}
      | RCSELECT of {exp:rcexp, expTy:Types.ty, indexExp:rcexp, label:string,
                     loc:Loc.loc, resultTy:Types.ty}
      | RCSEQ of {expList:rcexp list, expTyList:Types.ty list, loc:Loc.loc}
      | RCSIZEOF of Types.ty * Loc.loc
      | RCSWITCH of {branches:(Absyn.constant * rcexp) list, defaultExp:rcexp,
                     expTy:Types.ty, loc:Loc.loc, switchExp:rcexp,
                     resultTy:Types.ty}
      | RCTAGOF of Types.ty * Loc.loc
      | RCTAPP of {exp:rcexp, expTy:Types.ty, instTyList:Types.ty list, loc:Loc.loc}
      | RCVAR of varInfo
    and rcffiexp
      = RCFFIIMPORT of {ffiTy:TypedCalc.ffiTy, funExp:rcffifun}
    and rcffifun
      = RCFFIFUN of rcexp
      | RCFFIEXTERN of string
    and rcdecl
      = RCEXD of {exnInfo:exnInfo, loc:Loc.loc} list * Loc.loc
      | RCEXNTAGD of {exnInfo:exnInfo, varInfo:varInfo} * Loc.loc
      | RCEXPORTEXN of exnInfo
      | RCEXPORTVAR of varInfo
      | RCEXTERNEXN of exExnInfo
      | RCEXTERNVAR of exVarInfo
      | RCVAL of (varInfo * rcexp) list * Loc.loc
      | RCVALPOLYREC of Types.btvEnv * {exp:rcexp, expTy:Types.ty, var:varInfo} list * Loc.loc
      | RCVALREC of {exp:rcexp, expTy:Types.ty, var:varInfo} list * Loc.loc


    val format_rcexp
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> rcexp -> SMLFormat.FormatExpression.expression list
    val format_rcffiexp
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> rcffiexp -> SMLFormat.FormatExpression.expression list
    val format_rcdecl
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> rcdecl TermFormat.formatter
    val formatWithoutType_rcexp
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> rcexp -> TermFormat.format
    val formatWithoutType_rcffiexp
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> rcffiexp -> SMLFormat.FormatExpression.expression list
    val formatWithoutType_rcdecl
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> rcdecl TermFormat.formatter
    val format_rcdecl' : rcdecl TermFormat.formatter
    val formatWithoutType_rcdecl' : rcdecl TermFormat.formatter
  end
