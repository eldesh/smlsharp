_require "basis.smi"
_require "smlformat-lib.smi"
_require "../../../compiler-utils/env/main/SEnv.smi"
_require "../../../compiler-utils/env/main/LabelEnv.smi"
_require "../../name/main/LocalID.smi"
_require "../../control/main/Bug.ppg.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../util/main/TermFormat.smi"
_require "../../util/main/SmlppgUtil.ppg.smi"
_require "../../absyn/main/Symbol.ppg.smi"
_require "../../builtin2/main/BuiltinPrimitive.ppg.smi"
_require "../../builtin2/main/BuiltinTypeNames.ppg.smi"
_require "../../runtimetypes/main/FFIAttributes.ppg.smi"
_require "../../absyn/main/Absyn.ppg.smi"
_require "./OPrimInstMap.smi"

structure Types =
struct
  type typId = TypID.id
  type revealKey = RevealID.id
  type tvarId = TvarID.id
  type eq = Absyn.eq
  type utvar = {symbol:Symbol.symbol, id:tvarId, eq:eq, lifted:bool}
  type eqKind = Absyn.eq
  type dummyTyID = int
  type freeTypeVarID = FreeTypeVarID.id
  type lambdaDepth = int
  datatype ty
    = SINGLETONty of singletonTy
    | BACKENDty of backendTy
    | ERRORty
    | DUMMYty of dummyTyID
    | TYVARty of tvState ref
    | BOUNDVARty of BoundTypeVarID.id
    | FUNMty of ty list * ty
    | RECORDty of ty LabelEnv.map
    | CONSTRUCTty of
      {
        tyCon : 
        {id : typId,
         longsymbol : Symbol.longsymbol,
         iseq : bool,
         arity : int,
         runtimeTy : BuiltinTypeNames.bty,
         conSet : {hasArg:bool} SEnv.map,
         conIDSet : ConID.Set.set,
         extraArgs : ty list,
         dtyKind : dtyKind
        },
        args : ty list
      }
    | POLYty of 
      {
       boundtvars : {eqKind: eqKind, tvarKind: tvarKind}
                      BoundTypeVarID.Map.map,
       body : ty
      }

  and tvarKind 
    = OCONSTkind of ty list
    | OPRIMkind of 
      {instances : ty list, 
       operators : 
       {
        oprimId : OPrimID.id,
        longsymbol : Symbol.longsymbol,
        keyTyList : ty list,
        match : overloadMatch,
        instMap : overloadMatch OPrimInstMap.map
       } list
      }
    | UNIV
    | REC of ty LabelEnv.map
    | JOIN of ty LabelEnv.map * ty * ty * Loc.loc

  and dtyKind
    = DTY
    | OPAQUE of {opaqueRep:opaqueRep, revealKey:revealKey}
    | BUILTIN of BuiltinTypeNames.bty

  and opaqueRep 
    = TYCON of 
      {id : typId,
       longsymbol : Symbol.longsymbol,
       iseq : bool,
       arity : int,
       runtimeTy : BuiltinTypeNames.bty,
       conSet : {hasArg:bool} SEnv.map,
       conIDSet : ConID.Set.set,
       extraArgs : ty list,
       dtyKind : dtyKind
      }
    | TFUNDEF of {iseq:bool, arity:int, polyTy:ty}

  and tvState 
    = TVAR of 
      {
       lambdaDepth: lambdaDepth,
       id: freeTypeVarID,
       tvarKind: tvarKind,
       eqKind: eqKind,
       occurresIn: ty list,
       utvarOpt: utvar option (* SOME: user-defined type variable *)
      }
    | SUBSTITUTED of ty

  and singletonTy 
    = INSTCODEty of 
      {
       oprimId : OPrimID.id,
       longsymbol : Symbol.longsymbol,
       keyTyList : ty list,
       match : overloadMatch,
       instMap : overloadMatch OPrimInstMap.map
      }
    | INDEXty of string * ty
    | TAGty of ty
    | SIZEty of ty

  and backendTy =
      RECORDSIZEty of ty
    | RECORDBITMAPty of int * ty
    | RECORDBITMAPINDEXty of int * ty
    | CCONVTAGty of 
      {
        tyvars : {eqKind: eqKind, tvarKind: tvarKind} BoundTypeVarID.Map.map,
        haveClsEnv : bool,
        argTyList : ty list,
        retTy : ty option
      }
    | FUNENTRYty of
      {
        tyvars : {eqKind: eqKind, tvarKind: tvarKind} BoundTypeVarID.Map.map,
        haveClsEnv : bool,
        argTyList : ty list,
        retTy : ty option
      }
    | CALLBACKENTRYty of
      {
        tyvars : {eqKind: eqKind, tvarKind: tvarKind} BoundTypeVarID.Map.map,
        haveClsEnv : bool,
        argTyList : ty list,
        retTy : ty option,
        attributes : FFIAttributes.attributes
      }
    | SOME_FUNENTRYty
    | SOME_FUNWRAPPERty
    | SOME_CLOSUREENVty
    | SOME_CCONVTAGty
    | FOREIGNFUNPTRty of
      {
        argTyList : ty list,
        varArgTyList : ty list option,
        resultTy : ty option,
        attributes : FFIAttributes.attributes
      }

  and overloadMatch 
    = OVERLOAD_EXVAR of
      {
        exVarInfo: {longsymbol: Symbol.longsymbol, ty: ty},
        instTyList: ty list
      }
    | OVERLOAD_PRIM of
      {
        primInfo: {primitive: BuiltinPrimitive.primitive, ty: ty},
        instTyList: ty list
      }
    | OVERLOAD_CASE of ty * overloadMatch TypID.Map.map

  type tvKind
   = {
       lambdaDepth: lambdaDepth,
       id: freeTypeVarID,
       tvarKind: tvarKind,
       eqKind: eqKind,
       occurresIn: ty list,
       utvarOpt: utvar option (* SOME: user-defined type variable *)
      }

  type tyCon
    = {id : typId,
       longsymbol : Symbol.longsymbol,
       iseq : bool,
       arity : int,
       runtimeTy : BuiltinTypeNames.bty,
       conSet : {hasArg:bool} SEnv.map,
       conIDSet : ConID.Set.set,
       extraArgs : ty list,
       dtyKind : dtyKind
      }

  type oprimSelector 
    = {
        oprimId : OPrimID.id,
        longsymbol : Symbol.longsymbol,
        keyTyList : ty list,
        match : overloadMatch,
        instMap : overloadMatch OPrimInstMap.map
      }
  type btvKind 
    = {
        tvarKind : tvarKind,
        eqKind : eqKind
      }
  type btvEnv = btvKind BoundTypeVarID.Map.map
  type varInfo = {longsymbol:Symbol.longsymbol, id:VarID.id, ty:ty, opaque:bool}
  type exVarInfo = {longsymbol:Symbol.longsymbol, ty:ty}
  type primInfo = {primitive : BuiltinPrimitive.primitive, ty : ty}
  type oprimInfo = {ty : ty, longsymbol : Symbol.longsymbol, id : OPrimID.id}
  type conInfo = {longsymbol: Symbol.longsymbol, ty: ty, id: ConID.id}
  type exnInfo = {longsymbol: Symbol.longsymbol, ty: ty, id: ExnID.id}
  type exExnInfo = {longsymbol: Symbol.longsymbol, ty: ty}
  type foreignFunTy 
    = {
        argTyList : ty list,
        varArgTyList : ty list option,
        resultTy : ty option,
        attributes : FFIAttributes.attributes
      }

  type codeEntryTy =
      {
        tyvars : btvEnv,
        haveClsEnv : bool,
        argTyList : ty list,
        retTy : ty option
      }

  type callbackEntryTy =
      {
        tyvars : btvEnv,
        haveClsEnv : bool,
        argTyList : ty list,
        retTy : ty option,
        attributes : FFIAttributes.attributes
      }

  val infiniteDepth : lambdaDepth
  val toplevelDepth : lambdaDepth
  val youngerDepth
      : {contextDepth: lambdaDepth, tyvarDepth: lambdaDepth} -> bool
  val strictlyYoungerDepth
      : {contextDepth: lambdaDepth, tyvarDepth: lambdaDepth} -> bool

  val univKind
      : {tvarKind: tvarKind,
         eqKind: Absyn.eq,
         utvarOpt: utvar option}
  val kindedTyvarList : tvState ref list ref
  val newTvStateRef
      : {lambdaDepth: lambdaDepth,
         tvarKind: tvarKind,
         eqKind: Absyn.eq,
         occurresIn: ty list,
         utvarOpt: utvar option}
        -> tvState ref
  val newty
      : {tvarKind: tvarKind,
         eqKind: Absyn.eq,
         utvarOpt: utvar option}
        -> ty
  val newUtvar : lambdaDepth * Absyn.eq * utvar -> tvState ref
  val newtyRaw
      : {lambdaDepth: lambdaDepth,
         tvarKind: tvarKind,
         eqKind: Absyn.eq,
         occurresIn: ty list,
         utvarOpt: utvar option}
        -> ty
  val newtyWithLambdaDepth
      : (lambdaDepth * {tvarKind: tvarKind,
                        eqKind: Absyn.eq,
                        utvarOpt: utvar option})
        -> ty
  val printTy : ty -> unit
  val tyToString : ty -> string

(*****************)
  val format_tvarKind
      : {eqKind: Absyn.eq, tvarKind: tvarKind} TermFormat.btvEnv
         -> tvarKind -> TermFormat.format
  val format_tvState
      : {eqKind: Absyn.eq, tvarKind: tvarKind} TermFormat.btvEnv
         -> tvState -> TermFormat.format
  val format_ty
      : {eqKind: Absyn.eq, tvarKind: tvarKind} TermFormat.btvEnv
        -> ty -> TermFormat.format
  val formatWithType_ty
      : {eqKind: Absyn.eq, tvarKind: tvarKind} TermFormat.btvEnv
        -> ty -> TermFormat.format
  val format_tvKind
      : {eqKind: Absyn.eq, tvarKind: tvarKind} TermFormat.btvEnv
        -> tvKind -> TermFormat.format
  val format_dtyKind
      : {eqKind: Absyn.eq, tvarKind: tvarKind} TermFormat.btvEnv
        -> dtyKind -> TermFormat.format
  val format_oprimSelector
      : {eqKind: Absyn.eq, tvarKind: tvarKind} TermFormat.btvEnv
        -> oprimSelector -> TermFormat.format
  val format_dummyTyID : dummyTyID -> TermFormat.format
(*****************)


  val format_varInfo
      : varInfo -> TermFormat.format
  val format_exVarInfo
      : exVarInfo -> TermFormat.format
  val format_primInfo
      : primInfo -> TermFormat.format
  val format_oprimInfo
      : oprimInfo -> TermFormat.format
  val format_conInfo
      : {eqKind: Absyn.eq, tvarKind: tvarKind} TermFormat.btvEnv
        -> conInfo -> TermFormat.format
  val format_foreignFunTy
      : {eqKind: Absyn.eq, tvarKind: tvarKind} TermFormat.btvEnv
        -> foreignFunTy -> TermFormat.format
  val format_codeEntryTy
      : codeEntryTy -> TermFormat.format
  val format_callbackEntryTy
      : callbackEntryTy -> TermFormat.format
  val format_exnInfo
      : exnInfo -> TermFormat.format
  val format_exExnInfo
      : exExnInfo -> TermFormat.format

  val formatWithType_varInfo
      : {eqKind: Absyn.eq, tvarKind: tvarKind} TermFormat.btvEnv
        -> varInfo -> TermFormat.format
  val formatWithType_exVarInfo
      : {eqKind: Absyn.eq, tvarKind: tvarKind} TermFormat.btvEnv
        -> exVarInfo -> TermFormat.format
  val formatWithType_primInfo
      : {eqKind: Absyn.eq, tvarKind: tvarKind} TermFormat.btvEnv
        -> primInfo -> TermFormat.format
  val format_btvKind
      : {eqKind: Absyn.eq, tvarKind: tvarKind} TermFormat.btvEnv
        * TermFormat.format -> btvKind -> TermFormat.format
  val format_btvEnv
      : {eqKind: Absyn.eq, tvarKind: tvarKind} TermFormat.btvEnv
        -> btvEnv
        -> TermFormat.format
  val format_btvEnvWithType
      : {eqKind: Absyn.eq, tvarKind: tvarKind} TermFormat.btvEnv
        -> btvEnv
        -> TermFormat.format

end
