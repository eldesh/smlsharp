_require "basis.smi"
_require "ml-yacc-lib.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../runtimetypes/main/FFIAttributes.ppg.smi"
_require "../../absyn/main/Symbol.ppg.smi"
_require "../../absyn/main/Absyn.ppg.smi"
_require "../../absyn/main/AbsynSQL.ppg.smi"
_require "../../absyn/main/FormatTemplate.ppg.smi"

structure MLLrVals =
struct
  structure Parser =
  struct
    type token (= boxed)
    type stream (= boxed)
    type result = Absyn.unitparseresult
    type pos = Loc.pos
    type arg = unit
    exception ParseError
    val makeStream : {lexer:unit -> token} -> stream
    val consStream : token * stream -> stream
    val getStream : stream -> token * stream
    val sameToken : token * token -> bool
    val parse : {lookahead:int,
                 stream:stream,
                 error: (string * pos * pos -> unit),
                 arg: arg}
                -> result * stream
  end
  structure Tokens =
  struct
    type pos = Parser.pos
    type token = Parser.token
val ASSOCINDICATOR: ({ cut:bool,strength:int,direction:FormatTemplate.assocDirection } ) *  pos * pos -> token
val FORMATINDICATOR: ({ space:bool,newline:{ priority:FormatTemplate.priority }  option } ) *  pos * pos -> token
val STARTOFINDENT: (int) *  pos * pos -> token
val NEWLINE:  pos * pos -> token
val LOCALFORMATTAG: (string) *  pos * pos -> token
val FORMATTAG:  pos * pos -> token
val FORMATPARAMSTAG:  pos * pos -> token
val FORMATTERTAG:  pos * pos -> token
val FORMATCOMMENTEND:  pos * pos -> token
val FORMATCOMMENTSTART:  pos * pos -> token
val HEADERTAG:  pos * pos -> token
val DESTINATIONTAG:  pos * pos -> token
val PREFIXTAG:  pos * pos -> token
val DITTOTAG:  pos * pos -> token
val ROLLBACK:  pos * pos -> token
val COMMIT:  pos * pos -> token
val BEGIN:  pos * pos -> token
val DEFAULT:  pos * pos -> token
val SET:  pos * pos -> token
val UPDATE:  pos * pos -> token
val BY:  pos * pos -> token
val ORDER:  pos * pos -> token
val DELETE:  pos * pos -> token
val VALUES:  pos * pos -> token
val INTO:  pos * pos -> token
val INSERT:  pos * pos -> token
val FROM:  pos * pos -> token
val SELECT:  pos * pos -> token
val DESC:  pos * pos -> token
val ASC:  pos * pos -> token
val SQL:  pos * pos -> token
val SQLEXEC:  pos * pos -> token
val SQLEVAL:  pos * pos -> token
val SQLSERVER:  pos * pos -> token
val WORD: ({ radix:StringCvt.radix,digits:string } ) *  pos * pos -> token
val WITHTYPE:  pos * pos -> token
val WITH:  pos * pos -> token
val WHERE:  pos * pos -> token
val WHILE:  pos * pos -> token
val VAL:  pos * pos -> token
val USE':  pos * pos -> token
val USE:  pos * pos -> token
val UNDERBAR:  pos * pos -> token
val TYVAR: (string) *  pos * pos -> token
val TYPE:  pos * pos -> token
val THEN:  pos * pos -> token
val STRUCTURE:  pos * pos -> token
val STRUCT:  pos * pos -> token
val STRING: (string) *  pos * pos -> token
val SPECIAL: (string) *  pos * pos -> token
val SIZEOF:  pos * pos -> token
val SIGNATURE:  pos * pos -> token
val SIG:  pos * pos -> token
val SHARING:  pos * pos -> token
val SEMICOLON:  pos * pos -> token
val RPAREN:  pos * pos -> token
val REAL: (string) *  pos * pos -> token
val RBRACKET:  pos * pos -> token
val RBRACE:  pos * pos -> token
val REQUIRE:  pos * pos -> token
val REC:  pos * pos -> token
val POLYREC:  pos * pos -> token
val RAISE:  pos * pos -> token
val PERIODS:  pos * pos -> token
val PERIOD:  pos * pos -> token
val NULL:  pos * pos -> token
val ORELSE:  pos * pos -> token
val OPEN:  pos * pos -> token
val OPAQUE:  pos * pos -> token
val OP:  pos * pos -> token
val OF:  pos * pos -> token
val NONFIX:  pos * pos -> token
val LPAREN:  pos * pos -> token
val LOCAL:  pos * pos -> token
val LET:  pos * pos -> token
val LBRACKET:  pos * pos -> token
val LBRACE:  pos * pos -> token
val INTERFACE:  pos * pos -> token
val JOIN:  pos * pos -> token
val INTLAB: (string) *  pos * pos -> token
val INT: ({ radix:StringCvt.radix,digits:string } ) *  pos * pos -> token
val INFIXR:  pos * pos -> token
val INFIX:  pos * pos -> token
val INCLUDE:  pos * pos -> token
val IMPORT:  pos * pos -> token
val IN:  pos * pos -> token
val IF:  pos * pos -> token
val ID: (string) *  pos * pos -> token
val HASH:  pos * pos -> token
val HANDLE:  pos * pos -> token
val FUNCTOR:  pos * pos -> token
val FUN:  pos * pos -> token
val FN:  pos * pos -> token
val FFIAPPLY:  pos * pos -> token
val EXCEPTION:  pos * pos -> token
val EQTYVAR: (string) *  pos * pos -> token
val EQTYPE:  pos * pos -> token
val EQ:  pos * pos -> token
val END:  pos * pos -> token
val ELSE:  pos * pos -> token
val DO:  pos * pos -> token
val DATATYPE:  pos * pos -> token
val DARROW:  pos * pos -> token
val COMMA:  pos * pos -> token
val COLON:  pos * pos -> token
val CHAR: (string) *  pos * pos -> token
val CASE:  pos * pos -> token
val BUILTIN:  pos * pos -> token
val BAR:  pos * pos -> token
val ATTRIBUTE:  pos * pos -> token
val AT:  pos * pos -> token
val ASTERISK:  pos * pos -> token
val AS:  pos * pos -> token
val ARROW:  pos * pos -> token
val ANDALSO:  pos * pos -> token
val AND:  pos * pos -> token
val ABSTYPE:  pos * pos -> token
val EOF:  pos * pos -> token
  end
end
