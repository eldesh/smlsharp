_require "basis.smi"
_require "smlformat-lib.smi"
_require "../../util/main/SmlppgUtil.ppg.smi"
_require "../../util/main/TermFormat.smi"
_require "./FFIAttributes.ppg.smi"

structure RuntimeTypes =
struct
  datatype tag =
      TAG_BOXED
    | TAG_UNBOXED
  datatype ty
    = BOXEDty
    | DOUBLEty
    | FLOATty
    | INTty
    | UCHARty
    | UINTty
    | POINTERty
    | SOME_CODEPTRty
    | MLCODEPTRty of
      {
        haveClsEnv: bool,
        argTys: ty list,
        retTy: ty option
      }
    | CALLBACKCODEPTRty of
      {
        haveClsEnv: bool,
        argTys: ty list,
        retTy: ty option,
        attributes: FFIAttributes.attributes
      }
    | FOREIGNCODEPTRty of
      {
        argTys: ty list,
        varArgTys: ty list option,
        retTy: ty option,
        attributes: FFIAttributes.attributes
      }
  val format_tag : tag -> SMLFormat.FormatExpression.expression list
  val format_ty : ty -> SMLFormat.FormatExpression.expression list
end
