(**
 * runtime types
 *
 * @copyright (c) 2008, 2011, Tohoku University.
 * @author UENO Katsuhiro
 *)
structure RuntimeTypes =
struct

  (*% *)
  datatype tag =
      TAG_BOXED
    | TAG_UNBOXED

  (*%
   * @formatter(bool) SmlppgUtil.formatBinaryChoice
   * @formatter(option) SmlppgUtil.formatOptWithDefault
   * @formatter(optional) TermFormat.formatOptionalOption
   *)
  datatype ty =
      (*% @format "uchar" *)
      UCHARty       (* unsigned char *)
    | (*% @format "int" *)
      INTty         (* int *)
    | (*% @format "uint" *)
      UINTty        (* unsigned int *)
    | (*% @format "double" *)
      DOUBLEty      (* double precision floating-point *)
    | (*% @format "float" *)
      FLOATty       (* single precision floating-point *)
    | (*% @format "boxed" *)
      BOXEDty       (* heap object pointer *)
    | (*% @format "ptr" *)
      POINTERty     (* void * *)
    | (*% @format "codeptr" *)
      SOME_CODEPTRty  (* pointers to some code *)
    | (*% @format({haveClsEnv, argTys: argTy argTys, retTy: retTy retTyOpt})
       * retTyOpt(retTy)("void")
       * "(" haveClsEnv()("@,",) argTys(argTy)(",") ")*" *)
      (* pointers to function entries generated by SML# compiler *)
      MLCODEPTRty of
      {
        haveClsEnv: bool,
        argTys: ty list,
        retTy: ty option
      }
    | (*% @format({argTys: argTy argTys, varArgTys: varTy varTys varOpt,
       *           retTy: retTy retTyOpt, attributes})
       * retTyOpt(retTy)("void")
       * "(" argTys(argTy)(",")
       *     varOpt:optional(varTys(varTy)(","))(",...(",")") ")"
       *)
      FOREIGNCODEPTRty of
      {
        argTys: ty list,
        varArgTys: ty list option,
        retTy: ty option,
        attributes: FFIAttributes.attributes
      }
    | (*% @format({haveClsEnv, argTys: argTy argTys,
       *           retTy: retTy retTyOpt, attributes})
       * retTyOpt(retTy)("void")
       * "(" haveClsEnv()("@,",) argTys(argTy)(",") ")"
       *)
      CALLBACKCODEPTRty of
      {
        haveClsEnv: bool, 
        argTys: ty list,
        retTy: ty option,
        attributes: FFIAttributes.attributes
      }

end
