_require "basis.smi"
_require "smlnj-lib/Util/lib-base.smi"
_require "../../../compiler-utils/env/main/SEnv.smi"
_require "../../../compiler-utils/env/main/LabelEnv.smi"
_require "../../../compiler-utils/env/main/PathEnv.smi"
_require "../../control/main/Bug.ppg.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../absyn/main/Symbol.ppg.smi"
_require "../../absyn/main/Absyn.ppg.smi"
_require "../../absyn/main/AbsynInterface.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "../../builtin2/main/BuiltinTypes.smi"
_require "../../types/main/IDCalc.ppg.smi"
_require "../../usererror/main/UserErrorUtils.smi"
_require "../../util/main/utils.smi"
_require "../../patterncalc/main/PatternCalcInterface.ppg.smi"
_require "../../patterncalc/main/PatternCalc.ppg.smi"
_require "./EvalSig.smi"
_require "./EvalTy.smi"
_require "./FunctorUtils.smi"
_require "./NameEvalEnv.ppg.smi"
_require "./NameEvalError.ppg.smi"
_require "./NameEvalInterface.smi"
_require "./NameEvalUtils.smi"
_require "./NormalizeTy.smi"

structure CheckProvide =
struct
  val checkProvideFunctorBody :
      {topEnv:NameEvalEnv.topEnv, 
       evalEnv:NameEvalEnv.topEnv, 
       argSigEnv:NameEvalEnv.env, 
       specArgSig:PatternCalc.plsigexp, 
       functorSymbol:Symbol.symbol, 
       returnEnv:NameEvalEnv.env, 
       specBodyStr:PatternCalcInterface.pistrexp, 
       defLoc:Loc.loc,
       specLoc:Loc.loc}
      -> IDCalc.icdecl list * NameEvalEnv.env
  val checkPitopdecList :
      NameEvalEnv.topEnv
      -> (NameEvalEnv.topEnv * PatternCalcInterface.pitopdec list)
      -> {exportDecls:IDCalc.icdecl list, bindDecls:IDCalc.icdecl list}
end
