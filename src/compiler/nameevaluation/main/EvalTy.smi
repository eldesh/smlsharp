_require "basis.smi"
_require "../../../compiler-utils/env/main/SEnv.smi"
_require "../../../compiler-utils/env/main/LabelEnv.smi"
_require "../../control/main/Bug.ppg.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../absyn/main/Symbol.ppg.smi"
_require "../../absyn/main/Absyn.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "../../builtin2/main/BuiltinTypes.smi"
_require "../../builtin2/main/BuiltinTypeNames.ppg.smi"
_require "../../usererror/main/UserErrorUtils.smi"
_require "../../util/main/utils.smi"
_require "../../types/main/IDCalc.ppg.smi"
_require "../../types/main/tvarMap.smi"
_require "../../patterncalc/main/PatternCalc.ppg.smi"
_require "../../patterncalc/main/PatternCalcInterface.ppg.smi"
_require "../../patterncalc/main/PatternCalcInterface.ppg.smi"
_require "./NameEvalEnv.ppg.smi"
_require "./NameEvalError.ppg.smi"
_require "./NameEvalUtils.smi"
_require "./NormalizeTy.smi"
_require "./SetLiftedTys.smi"

structure EvalTy =
struct
  type tvarEnv = IDCalc.tvar SymbolEnv.map
  exception EvalRuntimeTy
  val emptyTvarEnv : tvarEnv
  val genTvar : tvarEnv -> Absyn.tvar -> tvarEnv * IDCalc.tvar
  val genTvarList : tvarEnv -> Absyn.tvar list -> tvarEnv * IDCalc.tvar list
  val evalTy : tvarEnv -> NameEvalEnv.env -> Absyn.ty -> IDCalc.ty
  val evalRuntimeTy : tvarEnv -> NameEvalEnv.env -> PatternCalcInterface.runtimeTy -> IDCalc.runtimeTy
  val compatRuntimeTy : {absTy:IDCalc.runtimeTy, implTy:IDCalc.runtimeTy} -> bool
  val evalTvar : tvarEnv -> Absyn.tvar -> IDCalc.tvar
  val evalFfity : tvarEnv -> NameEvalEnv.env -> PatternCalc.ffiTy -> IDCalc.ffiTy
  val emptyScopedTvars : IDCalc.scopedTvars
  val evalScopedTvars : 
      tvarEnv 
      -> NameEvalEnv.env
      -> PatternCalc.scopedTvars
      -> tvarEnv * IDCalc.kindedTvar list
  val evalDatatype :
      Symbol.symbol list -> NameEvalEnv.env
                         -> PatternCalc.datbind list * Loc.loc
                         -> NameEvalEnv.env * IDCalc.icdecl list
end
