_require "basis.smi"
_require "../../../compiler-utils/env/main/SEnv.smi"
_require "../../../compiler-utils/env/main/LabelEnv.smi"
(*
_require "../../../compiler-utils/env/main/PathEnv.smi"
*)

_require "../../control/main/Control.ppg.smi"
_require "../../control/main/Bug.ppg.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../absyn/main/Symbol.ppg.smi"
_require "../../absyn/main/Absyn.ppg.smi"
_require "../../absyn/main/AbsynInterface.ppg.smi"
_require "../../builtin2/main/BuiltinPrimitive.ppg.smi"
_require "../../builtin2/main/BuiltinTypes.smi"
_require "../../name/main/LocalID.smi"
_require "../../types/main/EvalIty.smi"
_require "../../types/main/Types.ppg.smi"
_require "../../types/main/IDCalc.ppg.smi"
_require "../../types/main/tvarMap.smi"
_require "../../types/main/OPrimInstMap.smi"
_require "../../usererror/main/UserError.ppg.smi"
_require "../../usererror/main/UserErrorUtils.smi"
_require "../../util/main/utils.smi"
_require "../../patterncalc/main/PatternCalc.ppg.smi"
_require "../../patterncalc/main/PatternCalcInterface.ppg.smi"
_require "./CheckProvide.smi"
_require "./EvalSig.smi"
_require "./EvalTy.smi"
_require "./FunctorUtils.smi"
_require "./NameEvalEnv.ppg.smi"
_require "./NameEvalError.ppg.smi"
_require "./NameEvalInterface.smi"
_require "./NameEvalUtils.smi"
_require "./NormalizeTy.smi"
_require "./SetLiftedTys.smi"
_require "./SigCheck.smi"
_require "./Subst.smi"
_require "./TfunVars.smi"
_require "./SpliceFunProvide.smi"

structure NameEval =
  struct
    datatype exnCon = EXN of IDCalc.exnInfo | EXEXN of IDCalc.exInfo
    val nameEval : {topEnv: NameEvalEnv.topEnv, version: int option,
                    systemDecls: IDCalc.icdecl list}
                    -> PatternCalcInterface.compileUnit
                    -> exnCon list
                       * NameEvalEnv.topEnv
                       * IDCalc.topdecl
                       * UserError.errorInfo list
    val nameEvalInteractiveEnv :
        NameEvalEnv.topEnv
        -> PatternCalcInterface.interactiveUnit
        -> NameEvalEnv.topEnv * UserError.errorInfo list
    val evalBuiltin
        : PatternCalcInterface.pitopdec list
          -> NameEvalEnv.topEnv * IDCalc.icdecl list
  end
