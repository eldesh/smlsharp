(**
 * @copyright (c) 2006, Tohoku University.
 * @author Atsushi Ohori
 * @author Duc-Huu NGUYEN
 * @version $Id: TypedLambda.ppg,v 1.50 2008/08/06 17:23:41 ohori Exp $
 *)
structure TypedLambda =
struct

  type loc = Loc.loc

  (*%
   * @params(btvEnv)
   * @formatter(Types.ty) Types.format_ty
   *)
  (*%
   * @prefix formatWithType_
   * @params(btvEnv)
   * @formatter(Types.ty) Types.format_ty
   *)
  type ty =
      (*% @format(ty) ty()(btvEnv) *)
      (*% 
        * @prefix formatWithType_
          @format(ty) ty()(btvEnv) 
       *)
      Types.ty

  (*%
   * @formatter(RecordCalc.varInfo) RecordCalc.format_varInfo
   *)
  (*%
   * @prefix formatWithType_
   * @params(btvEnv)
   * @formatter(RecordCalc.varInfo) RecordCalc.formatWithType_varInfo
   *)
  type varInfo =
      (*% *)
      (*% @prefix formatWithType_ @format(v) v()(btvEnv) *)
      RecordCalc.varInfo

  (*%
   * @formatter(RecordCalc.exVarInfo) RecordCalc.format_exVarInfo
   *)
  (*%
   * @prefix formatWithType_
   * @params(btvEnv)
   * @formatter(RecordCalc.exVarInfo) RecordCalc.formatWithType_exVarInfo
   *)
  type exVarInfo =
      (*% *)
      (*% @prefix formatWithType_ @format(v) v()(btvEnv) *)
      RecordCalc.exVarInfo

  (*%
   * @params(btvEnv)
   * @formatter(Types.btvEnv) Types.format_btvEnv
   * @formatter(extendBtvEnv) TermFormat.extendBtvEnv
   * @formatter(appList) TermFormat.formatAppList
   *)
  type primTy =
      (*%
       * @format({boundtvars, argTyList: argTy argTys, resultTy})
       * "[" !N0{ 2[
       *   {boundtvars()(boundtvars:extendBtvEnv()(btvEnv)) "."}
       *   +1
       *   argTys:appList
       *     (argTy()(boundtvars:extendBtvEnv()(btvEnv)))("{",",","}")
       *   +1 "->" +d resultTy()(boundtvars:extendBtvEnv()(btvEnv))
       * ] "]" }
       *)
       {boundtvars : Types.btvEnv, argTyList : ty list, resultTy : ty}

  (*%
   * @formatter(BuiltinPrimitive.primitiveTypedLambda)
   * BuiltinPrimitive.format_primitiveTypedLambda
   *)
  (*%
   * @prefix formatWithType_
   * @params(btvEnv)
   * @formatter(BuiltinPrimitive.primitiveTypedLambda)
   * BuiltinPrimitive.format_primitiveTypedLambda
   * @formatter(primTy) format_primTy
   *)
  type primInfo =
      (*%
       * @format({primitive, ty})
       * primitive
       *)
      (*%
       * @prefix formatWithType_
       * @format({primitive, ty})
       * L2{ primitive +1 ":" +d ty()(btvEnv) }
       *)
      {
        primitive : BuiltinPrimitive.primitiveTypedLambda,
        ty : primTy
      }

  (*%
   * @params(btvEnv)
   * @formatter(Types.btvEnv) Types.format_btvEnv
   *)
  (*%
   * @prefix formatWithType_
   * @params(btvEnv)
   * @formatter(Types.btvEnv) Types.format_btvEnv
   *)
  type btvEnv =
      (*% @format(btv) btv()(btvEnv) *)
      (*% 
          @prefix formatWithType_
          @format(btv) btv()(btvEnv) 
       *)
      Types.btvEnv

  (*% @formatter(ConstantTerm.constant) ConstantTerm.format_constant *)
  (*% 
      @prefix formatWithType_
      @formatter(ConstantTerm.constant) ConstantTerm.format_constant
   *)
  type constant = ConstantTerm.constant

  (*%
   * @params(btvEnv)
   * @formatter(optionalList) TermFormat.formatOptionalList
   * @formatter(appList) TermFormat.formatAppList
   * @formatter(decList) TermFormat.formatDeclList
   * @formatter(caseList) TermFormat.formatCaseList
   * @formatter(enclosedList) TermFormat.formatEnclosedList
   * @formatter(ifCons) TermFormat.formatIfCons
   * @formatter(formatRecordExp) TermFormat.formatRecordExp
   * @formatter(withType) formatWithType_varInfo
   * @formatter(extendBtvEnv) TermFormat.extendBtvEnv
   * @formatter(FunLocalLabel.id) FunLocalLabel.format_id
   *)
  (*%
   * @prefix formatWithType_
   * @params(btvEnv)
   * @formatter(appList) TermFormat.formatAppList
   * @formatter(optionalList) TermFormat.formatOptionalList
   * @formatter(decList) TermFormat.formatDeclList
   * @formatter(caseList) TermFormat.formatCaseList
   * @formatter(enclosedList) TermFormat.formatEnclosedList
   * @formatter(ifCons) TermFormat.formatIfCons
   * @formatter(formatRecordExp) TermFormat.formatRecordExp
   * @formatter(extendBtvEnv) TermFormat.extendBtvEnv
   * @formatter(btvEnv) format_btvEnv
   * @formatter(FunLocalLabel.id) FunLocalLabel.format_id
   *)
  datatype tlexp =
      (*%
       * @format({funExp, attributes, argExpList: arg args, resultTy, loc})
       * L8{ 1[
       *   "_FFIAPPLY"
       *   +1 funExp()(btvEnv)
       *   +1 args:appList(arg()(btvEnv))("(",",",")")
       * ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({funExp, attributes, argExpList: arg args, resultTy, loc})
       * L8{ 2[
       *   "_FFIAPPLY"
       *   +1 funExp()(btvEnv)
      *    +1 args:appList(arg()(btvEnv))("(",",",")")
       * ] }
       *)
      TLFOREIGNAPPLY of
      {
        funExp : tlexp,
        attributes : FFIAttributes.attributes,
        argExpList : tlexp list,
        resultTy : ty option,
        loc : loc
      }
    | (*%
       * @format({attributes, resultTy, argVarList: arg args, bodyExp, loc})
       * L8{ 2[
       *   "_callback"
       *   +1 
       *    R1{ 2[
       *     "fn" +d args:enclosedList(arg:withType()(btvEnv))
       *                              ("{",",","}")
       *          +d "=>" +1 bodyExp()(btvEnv) ] }
       * ] }
       *)
      (*% @prefix formatWithType_
       * @format({attributes, resultTy, argVarList: arg args, bodyExp, loc})
       * L8{ 2[
       *   "_callback"
       *   +1
       *    R1{ 2[
       *     "fn" +d args:enclosedList(arg()(btvEnv))("{",",","}")
       *          +d "=>" +1 bodyExp()(btvEnv) ] }
       * ] }
       *)
      TLCALLBACKFN of
      {
        attributes : FFIAttributes.attributes,
        resultTy : ty option,
        argVarList : varInfo list,
        bodyExp : tlexp,
        loc : loc
      }
    | (*%
       * @format({ty, loc})
       * "_sizeof(" ty()(btvEnv) ")"
       *)
      (*%
       * @prefix formatWithType_
       * @format({ty, loc})
       * "_sizeof(" ty()(btvEnv) ")"
       *)
      TLSIZEOF of {ty : ty, loc : loc}
    | (*%
       * @format({ty, loc})
       * "_tagof(" ty()(btvEnv) ")"
       *)
      (*%
       * @prefix formatWithType_
       * @format({ty, loc})
       * "_tagof(" ty()(btvEnv) ")"
       *)
      TLTAGOF of {ty : ty, loc : loc}
    | (*%
       * @format({label, recordTy, loc})
       * "_indexof(" !N0{ label "," +1 recordTy()(btvEnv) ")" }
       *)
      (*%
       * @prefix formatWithType_
       * @format({label, recordTy, loc})
       * "_indexof(" !N0{ label "," +1 recordTy()(btvEnv) ")" }
       *)
      TLINDEXOF of {label : string, recordTy : ty, loc : loc}
    | (*%
       * @format({const, ty, loc}) const
       *)
      (*%
       * @prefix formatWithType_
       * @format({const, ty, loc}) const
       *)
      TLCONSTANT of {const : constant, ty : ty, loc : loc}
    | (*%
       * @format({name, ty, loc})
       * "_FOREIGNSYMBOL(" name ")"
       *)
      (*%
       * @prefix formatWithType_
       * @format({name, ty, loc})
       * "_FOREIGNSYMBOL(" !N0{ name +1 ":" +d ty()(btvEnv) } ")"
       *)
      TLFOREIGNSYMBOL of
      {name : string, ty : ty, loc : loc}
    | (*%
       * @format({varInfo, loc}) varInfo
       *)
      (*%
       * @prefix formatWithType_
       * @format({varInfo, loc}) varInfo()(btvEnv)
       *)
      TLVAR of {varInfo : varInfo, loc : loc}
    | (*%
       * @format({exVarInfo, loc}) "EXVAR(" !N0{ exVarInfo } ")"
       *)
      (*%
       * @prefix formatWithType_
       * @format({exVarInfo, loc}) "EXVAR(" !N0{ exVarInfo()(btvEnv) } ")"
       *)
      TLEXVAR of {exVarInfo : exVarInfo, loc : loc}
    | (*%
         @format({primInfo, argExpList: arg args, instTyList: ty tys, loc})
         !N0{ 1[ "_PRIM(" primInfo
               tys:ifCons()(tys:optionalList(ty()(btvEnv))("{",",","}") )
              ")"
               +1
               {args:appList(arg()(btvEnv))("(",","1,")")}
              ]
           }
       *)
      (*%
       * @prefix formatWithType_
       * @format({primInfo, argExpList: arg args, instTyList: ty tys, loc})
       * L8{ 2[ "_PRIMAPPLY(" primInfo()(btvEnv) ")"
       *        tys:ifCons()( +1 tys:appList(ty()(btvEnv))("(",",",")") )
       *        +1 args:appList(arg()(btvEnv))("(",",",")") ] }
       *)
      TLPRIMAPPLY of
      {
        primInfo : primInfo,
        argExpList : tlexp list,
        instTyList : ty list,
        loc : loc
      }
    | (*%
       * @format({funExp, funTy, argExpList: arg args, loc})
       * L8{ 1[
       *   funExp()(btvEnv)
       *   +1 args:appList(arg()(btvEnv))("{",",","}")
       * ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({funExp, funTy, argExpList: arg args, loc})
       * L8{ 2[
       *   L2{ funExp()(btvEnv) +1 ":" +d funTy()(btvEnv) }
       *   +1 args:appList(arg()(btvEnv))("{",",","}")
       * ] }
       *)
      TLAPPM of
      {
        funExp : tlexp,
        funTy : ty,
        argExpList : tlexp list,
        loc : loc
      }
    | (*%
       * @format({localDecl, mainExp, loc})
          "let"
               1[ +1 localDecl()(btvEnv) ]
          +1 "in" 
               1[ +1 mainExp()(btvEnv)]
          +1 "end"
       *)
      (*%
       * @prefix formatWithType_
       * @format({localDecl, mainExp, loc})
       * L2{ !N0{
       *   "let" 2[ +1 localDecl()(btvEnv) ]
       *   +1 "in" 2[ +1 !N0{ mainExp()(btvEnv) } ]
       *   +1 "end"
       * } }
       *)
      TLLET of
      {
        localDecl : tldecl,
        mainExp : tlexp,
        loc : loc
      }
    | (*%
       * @format({fields:field fields, recordTy, isMutable, loc})
       * fields:formatRecordExp(field()(btvEnv))
       *)
      (*%
       * @prefix formatWithType_
       * @format({fields:field fields, recordTy, isMutable, loc})
       * L2{ fields:formatRecordExp(field()(btvEnv))
       *     +1 ":" +d recordTy()(btvEnv) }
       *)
      TLRECORD of
      {
        isMutable : bool,
        fields : tlexp LabelEnv.map,
        recordTy : ty,
        loc : loc
      }
    | (*%
       * @format({recordExp, indexExp, label, recordTy, resultTy, loc})
       * L8{ 1[ "#" label
       *       +1 indexExp()(btvEnv)
       *       +1 recordExp()(btvEnv) ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({recordExp, indexExp, label, recordTy, resultTy, loc})
       * L2{
       * L8{ 2[ "#" label
       *        +1 indexExp()(btvEnv)
       *        +1 L2{ recordExp()(btvEnv)
       *               +1 ":" +d recordTy()(btvEnv) } ] }
       * +1 ":" +d resultTy()(btvEnv) }
       *)
      TLSELECT of
      {
        recordExp : tlexp,
        indexExp : tlexp,
        label : string,
        recordTy : ty,
        resultTy : ty,
        loc : loc
      }
    | (*%
       * @format({recordExp, recordTy, indexExp, label, valueExp, valueTy, loc})
       * L8{ 1[ recordExp()(btvEnv)
       *       +1 "#" +d "{"
       *         !N0{ L2{ label +1 "/" +d indexExp()(btvEnv) } +d "="
       *              1[ +1 valueExp()(btvEnv) ] } "}" ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({recordExp, recordTy, indexExp, label, valueExp, valueTy, loc})
       * L8{ 2[ L2{ recordExp()(btvEnv) +1 ":" +d recordTy()(btvEnv) }
       *        +1 "#" +d "{"
       *          !N0{ L2{ label +1 "/" +d indexExp()(btvEnv) } +d "="
       *               2[ +1 valueExp()(btvEnv) ] } "}" ] }
       *)
      TLMODIFY of
      {
        recordExp : tlexp,
        recordTy : ty,
        indexExp : tlexp,
        label : string,
        valueExp : tlexp,
        valueTy : ty,
        loc : loc
      }
    | (*%
       * @format({argExp, resultTy, loc})
       * R1{ 1[ "raise" +1 argExp()(btvEnv) ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({argExp, resultTy, loc})
       * L2{ R1{ 2[ "raise" +1 argExp()(btvEnv) ] }
       *     +1 ":" +d resultTy()(btvEnv) }
       *)
      TLRAISE of
      {
        argExp : tlexp,
        resultTy : ty,
        loc : loc
      }
    | (*%
       * @format({exp, exnVar, handler, resultTy, loc})
       * R1{ "_try"
       *     1[ +1 exp()(btvEnv) ]
       *     +1 "handle" +d { exnVar +1 "=>" }
       *     1[ +1 handler()(btvEnv) ]
       *     +1 "end" }
       *)
      (*%
       * @prefix formatWithType_
       * @format({exp, exnVar, handler, resultTy, loc})
       * L2{
       * R1{ "_try"
       *     2[ +1 exp()(btvEnv) ]
       *     +1 "handle" +d { exnVar()(btvEnv) +1 "=>" }
       *     2[ +1 handler()(btvEnv) ]
       *     +1 "end" }
       * +1 ":" +d resultTy()(btvEnv) }
       *)
      TLHANDLE of
      {
        exp : tlexp,
        exnVar : varInfo,
        handler : tlexp,
        resultTy : ty,
        loc : loc
      }
    | (*%
        @format({switchExp, expTy, branches: branch branches, defaultExp,
                 resultTy, loc})
        R1{
            { 1[ "case" +1 switchExp()(btvEnv) +1 "of" ] }
            branches:caseList(branch)
              (1[+1], +1 "|" +d, !N0{ 1[ "_" +d "=>" +1 defaultExp()(btvEnv) ] })
          }
         @format:branch({constant, exp})
           !N0{ 1[ constant +d "=>" +1 exp()(btvEnv) ]
              }
       *)
      (*%
       * @prefix formatWithType_
       * @format({switchExp, expTy, branches: branch branches, defaultExp,
       *          resultTy, loc})
       * L2{
       * R1{
       *   { 2[ "case" +1 L2{ switchExp()(btvEnv) +1 ":" +d expTy()(btvEnv) }
       *        +1 "of" ] }
       *   branches:caseList(branch)
       *     (2[+1], +1 "|" +d, 2[ "_" +d "=>" +1 defaultExp()(btvEnv) ])
       * }
       * +1 ":" +d resultTy()(btvEnv) }
       * @format:branch({constant, exp})
       * 2[ constant +d "=>" +1 exp()(btvEnv) ]
       *)
      TLSWITCH of
      {
        switchExp : tlexp,
        expTy : ty,
        branches : {constant : constant, exp : tlexp} list,
        defaultExp : tlexp,
        resultTy : ty,
        loc : loc
      }
    | (*%
       * @format({codeLabel, argVarList: arg args, codeBodyExp, mainExp,
       *          resultTy, loc})
       * L2{ !N0{
       *   "code" 2[ +1 codeLabel
       *             +1 args:appList(arg)("{",",","}")
       *             +d "=" ]
       *   2[ +1 codeBodyExp()(btvEnv) ]
       * } }
       * +1 "in" 2[ +1 !N0{ mainExp()(btvEnv) } ]
       * +1 "end"
       *)
      (*% @prefix formatWithType_
       * @format({codeLabel, argVarList: arg args, codeBodyExp, mainExp,
       *          resultTy, loc})
       * L2{ !N0{
       *   "code" 2[ +1 codeLabel
       *             +1 args:appList(arg()(btvEnv))("{",",","}")
       *             +d "=" ]
       *   2[ +1 codeBodyExp()(btvEnv) ]
       * } }
       * +1 "in" 2[ +1 !N0{ mainExp()(btvEnv) } ]
       * +1 "end"
       *)
      TLLOCALCODE of
      {
        codeLabel : FunLocalLabel.id,
        argVarList : varInfo list,
        codeBodyExp : tlexp,
        mainExp : tlexp,
        resultTy : ty,
        loc : loc
      }
    | (*%
       * @format({destinationLabel, argExpList: arg args, resultTy, loc})
       * L8{ 2[
       *   "goto"
       *   +1 destinationLabel
       *   +1 args:appList(arg()(btvEnv))("{",",","}")
       * ] }
       *)
      (*% @prefix formatWithType_
       * @format({destinationLabel, argExpList: arg args, resultTy, loc})
       * L8{ 2[
       *   "goto"
       *   +1 destinationLabel
       *   +1 args:appList(arg()(btvEnv))("{",",","}")
       * ] }
       *)
      TLGOTO of
      {
        destinationLabel : FunLocalLabel.id,
        argExpList : tlexp list,
        resultTy : ty,
        loc : loc
      }
    | (*%
       * @format({argVarList: arg args, bodyTy, bodyExp, loc})
       * R1{ "fn" +d {args:appList(arg)("{",",","}")} +d "=>"
       *     1[ +1 bodyExp()(btvEnv) ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({argVarList: arg args, bodyTy, bodyExp, loc})
       * R1{ "fn" +d args:appList(arg()(btvEnv))("{",",","}") +d "=>"
       *     3[ +1 L2{ bodyExp()(btvEnv) +1 ":" +d bodyTy()(btvEnv) } ] }
       *)
      TLFNM of
      {
        argVarList : varInfo list,
        bodyTy : ty,
        bodyExp : tlexp,
        loc : loc
      }
    | (*%
       * @format({btvEnv:btv, expTyWithoutTAbs, exp, loc})
       * "[" !N0{ btv()(btvEnv) "."
       *          +1 exp()(btv:extendBtvEnv()(btvEnv)) } "]"
       *)
      (*%
       * @prefix formatWithType_
       * @format({btvEnv:btv, expTyWithoutTAbs, exp, loc})
       * "[" !N0{
       *   btv()(btvEnv) "."
       *   +1 L2{ exp()(btv:extendBtvEnv()(btvEnv))
       *          +1 ":" +d expTyWithoutTAbs()(btv:extendBtvEnv()(btvEnv)) }
       * } "]"
       *)
      TLPOLY of
      {
        btvEnv : btvEnv,
        expTyWithoutTAbs : ty,
        exp : tlexp,
        loc : loc
      }
    | (*%
       * @format({exp, expTy, instTyList: ty tys, loc})
       * L8{ 1[ exp()(btvEnv)
       *        +1 tys:enclosedList(ty()(btvEnv))("{",",","}") ] }
       *)
      (*%
       * @prefix formatWithType_
       * @format({exp, expTy, instTyList: ty tys, loc})
       * L8{ 2[ L2{ exp()(btvEnv) +1 ":" +d expTy()(btvEnv) }
       *        +1 tys:enclosedList(ty()(btvEnv))("{",",","}") ] }
       *)
      TLTAPP of
      {
        exp : tlexp,
        expTy : ty,
        instTyList : ty list,
        loc : loc
      }
    | (*%
       * @format({exp, expTy, targetTy, runtimeTyCast, bitCast, loc})
       * "cast" "(" !N0{ exp()(btvEnv) } ")"
       *)
      (*%
       * @prefix formatWithType_
       * @format({exp, expTy, targetTy, runtimeTyCast, bitCast, loc})
       * "cast" "(" !N0{ exp()(btvEnv) +1 ":" +d targetTy()(btvEnv) } ")"
       *)
      TLCAST of
      {
        exp : tlexp,
        expTy : ty,
        targetTy : ty,
        runtimeTyCast: bool,
        bitCast: bool,
        loc : loc
      }

  and tldecl =
      (*%
        @format({boundVar, boundExp, loc})
         !N0{"val" +d boundVar +d "="
              1[ +1 boundExp()(btvEnv) ]
            }
       *)
      (*%
       * @prefix formatWithType_
       * @format({boundVar, boundExp, loc})
       * "val" +d boundVar()(btvEnv) +d "="
       *   4[ +1 boundExp()(btvEnv) ]
       *)
      TLVAL of
      {
        boundVar : varInfo,
        boundExp : tlexp,
        loc : loc
      }
    | (*%
       * @format({recbindList: bind binds, loc})
       * binds:decList(bind)("val" +d "rec" +d, +1 "and" +d)
       * @format:bind({boundVar, boundExp})
       * boundVar +d "=" 1[ +1 boundExp()(btvEnv) ]
       *)
      (*%
       * @prefix formatWithType_
       * @format({recbindList: bind binds, loc})
       * binds:decList(bind)("val" +d "rec" +d, +1 "and" +d)
       * @format:bind({boundVar, boundExp})
       * boundVar()(btvEnv) +d "=" 4[ +1 boundExp()(btvEnv) ]
       *)
      TLVALREC of
      {
        recbindList : {boundVar : varInfo, boundExp : tlexp} list,
        loc : loc
      }
    | (*%
       * @format(exVarInfo * exp * loc)
       * "export" +d "val" +d exVarInfo +d "=" 2[ +1 exp()(btvEnv) ]
       *)
      (*%
       * @prefix formatWithType_
       * @format(exVarInfo * exp * loc)
       * "export" +d "val" +d exVarInfo()(btvEnv) +d "=" 2[ +1 exp()(btvEnv) ]
       *)
      TLEXPORTVAR of exVarInfo * tlexp * loc
    | (*%
         @format(exVarInfo * loc)
       *)
      (*%
         @prefix formatWithType_
         @format(exVarInfo * loc)
       *)
      (* temporary disable extern printing
         "extern" +d "val" +d exVarInfo
       formatWithType_
         "extern" +d "val" +d exVarInfo()(btvEnv)
       *)
      TLEXTERNVAR of exVarInfo * loc

  val format_tldecl' =  format_tldecl nil

end
