_require "basis.smi"
_require "smlformat-lib.smi"
_require "../../name/main/LocalID.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../util/main/TermFormat.smi"
_require "../../util/main/BigInt_IntInf.smi"
_require "../../toolchain/main/Filename.smi"
_require "./Symbol.ppg.smi"
_require "./Absyn.ppg.smi"

structure AbsynInterface =
struct
  datatype constraint =
      SIG_TRANSPARENT
    | SIG_OPAQUE

  type ty = Absyn.ty
  type symbol = Symbol.symbol
  type longsymbol = Symbol.longsymbol
  type loc = Loc.loc
  datatype overloadInstance =
      INST_OVERLOAD of {tyvar: Absyn.tvar,
                        expTy: ty,
                        matches: {instTy: ty, instance: overloadInstance} list,
                        loc: loc}
    | INST_LONGVID of {longsymbol: longsymbol}

  type overloadCase =
      {tyvar: Absyn.tvar,
       expTy: ty,
       matches: {instTy: ty, instance: overloadInstance} list,
       loc: loc}

  datatype valbindBody =
      VAL_EXTERN of {ty: ty}
    | VALALIAS_EXTERN of longsymbol
    | VAL_BUILTIN of {builtinSymbol: symbol, ty: ty}
    | VAL_OVERLOAD of overloadCase

  type valbind =
      {symbol: symbol, body: valbindBody, loc: loc}

  datatype typbind =
      TRANSPARENT of {tyvars: Absyn.tvar list, symbol: symbol, ty: ty, loc: loc}
    | OPAQUE_NONEQ of {tyvars: Absyn.tvar list, symbol: symbol, runtimeTy: longsymbol, loc: loc}
    | OPAQUE_EQ of {tyvars: Absyn.tvar list, symbol: symbol, runtimeTy: longsymbol, loc: loc}

  type conbind =
      {symbol: symbol, ty: ty option}

  type datbind =
      {tyvars: Absyn.tvar list, symbol: symbol, conbind: conbind list}

  datatype exbind =
      EXNDEF of {symbol: symbol, ty: ty option, loc: loc}
    | EXNREP of {symbol: symbol, longsymbol: longsymbol, loc: loc}

  datatype idec =
      IVAL of valbind list
    | ITYPE of typbind list
    | IDATATYPE of {datbind: datbind list, loc: loc}
    | ITYPEREP of {symbol: symbol, longsymbol: longsymbol, loc: loc}
    | ITYPEBUILTIN of {symbol: symbol, builtinSymbol: symbol,loc: loc}
    | IEXCEPTION of exbind list
    | ISTRUCTURE of {symbol: symbol, strexp: istrexp, loc: loc}


  and istrexp =
      ISTRUCT of {decs: idec list, loc: loc}
    | ISTRUCTREP of {longsymbol:longsymbol, loc: loc}
    | IFUNCTORAPP of {functorSymbol:symbol, argument:longsymbol, loc: loc}

  type strbind =
      {
        symbol: symbol,
        strexp: istrexp,
        loc: loc
      }

  type sigbind =
      {symbol: symbol, sigexp: Absyn.sigexp, loc: loc}

  datatype funParam =
      FUNPARAM_FULL of {symbol: symbol, sigexp: Absyn.sigexp}
    | FUNPARAM_SPEC of Absyn.spec

  type funbind =
      {
        functorSymbol: symbol,
        param: funParam,
        strexp: istrexp,
        loc: loc
      }

  datatype fixity =
      INFIXL of string option
    | INFIXR of string option
    | NONFIX

  datatype itopdec =
      IDEC of idec
    | IFUNDEC of funbind
    | IINFIX of {fixity: fixity, symbols: symbol list, loc: loc}

  datatype itop =
      INTERFACE of
      {
        requires: Symbol.symbol list,
        provide: itopdec list
      }
    | INCLUDES of
      {
        includes: Symbol.symbol list,
        topdecs: Absyn.topdec list
      }

  datatype filePlace =
      STDPATH
    | LOCALPATH
  
(*
  datatype source =
      LOADED of filePlace * Filename.filename
    | GENERATED
*)
  type source = filePlace * Filename.filename
  
  type interfaceName =
      {
        hash: string,
        source: source
      } 

  type interfaceDec =
      {
        interfaceId: InterfaceID.id,
        interfaceName : interfaceName,
        requiredIds: {id: InterfaceID.id, loc: loc} list,
        provideTopdecs: itopdec list
      }

  type interface =
      {
        interfaceDecs : interfaceDec list,
        provideInterfaceNameOpt : interfaceName option,
        requiredIds : {id: InterfaceID.id, loc: loc} list,
        provideTopdecs : itopdec list
      } 

  type compileUnit =
      {
        interface : interface option,
        topdecsInclude : Absyn.topdec list,
        topdecsSource : Absyn.topdec list
      }

  type interactiveUnit =
      {
        interface : interface,
        interfaceDecls : itopdec list,
        topdecsInclude : Absyn.topdec list
      }

  val format_constraint
      : constraint -> SMLFormat.FormatExpression.expression list
  val format_ty : ty -> SMLFormat.FormatExpression.expression list
  val format_loc : loc -> SMLFormat.FormatExpression.expression list
  val format_overloadInstance
      : overloadInstance -> SMLFormat.FormatExpression.expression list
(*
  val format_overloadMatch
      : overloadMatch -> SMLFormat.FormatExpression.expression list
*)
  val format_overloadCase
      : overloadCase -> SMLFormat.FormatExpression.expression list
  val format_valbindBody
      : SMLFormat.FormatExpression.expression list
        -> valbindBody -> SMLFormat.FormatExpression.expression list
  val format_valbind
      : valbind -> SMLFormat.FormatExpression.expression list
  val format_typbind
      : typbind -> SMLFormat.FormatExpression.expression list
  val format_conbind
      : conbind -> SMLFormat.FormatExpression.expression list
  val format_datbind
      : datbind -> SMLFormat.FormatExpression.expression list
  val format_exbind
      : exbind -> SMLFormat.FormatExpression.expression list
  val format_idec
      : idec -> SMLFormat.FormatExpression.expression list
  val format_istrexp
      : istrexp -> SMLFormat.FormatExpression.expression list
  val format_strbind
      : strbind -> SMLFormat.FormatExpression.expression list
  val format_sigbind
      : sigbind -> SMLFormat.FormatExpression.expression list
  val format_funParam
      : funParam -> SMLFormat.FormatExpression.expression list
  val format_funbind
      : funbind -> SMLFormat.FormatExpression.expression list
  val format_fixity
      : fixity -> SMLFormat.FormatExpression.expression list
  val format_itopdec
      : itopdec -> SMLFormat.FormatExpression.expression list
  val format_itop
      : itop -> SMLFormat.FormatExpression.expression list
  val format_filePlace
      : filePlace -> SMLFormat.FormatExpression.expression list
  val format_source
      : source -> SMLFormat.FormatExpression.expression list
  val format_interfaceName
      : interfaceName -> SMLFormat.FormatExpression.expression list
  val format_interfaceDec
      : interfaceDec -> SMLFormat.FormatExpression.expression list
  val format_interface
      : interface -> SMLFormat.FormatExpression.expression list
  val format_compileUnit
      : compileUnit -> SMLFormat.FormatExpression.expression list
  val format_interactiveUnit
      : interactiveUnit -> SMLFormat.FormatExpression.expression list
end
