_require "basis.smi"
_require "smlformat-lib.smi"
_require "../../../compiler-utils/env/main/SEnv.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../control/main/Bug.ppg.smi"
_require "../../util/main/TermFormat.smi"
_require "../../util/main/SmlppgUtil.ppg.smi"
_require "../../runtimetypes/main/FFIAttributes.ppg.smi"
_require "./FormatTemplate.ppg.smi"
_require "./Symbol.ppg.smi"
_require "./AbsynSQL.ppg.smi"

structure Absyn =
struct
  type loc = Loc.loc
  type symbol = Symbol.symbol
  type longsymbol = Symbol.longsymbol

  datatype constant 
    = INT of {radix: StringCvt.radix, digits: string} * loc
    | WORD of {radix: StringCvt.radix, digits: string} * loc
    | STRING of string * loc
    | REAL of string * loc
    | CHAR of char * loc
    | UNITCONST of loc
    | NULLCONST of loc

  type headerFormatComment = 
      {
        formatters : (longsymbol * longsymbol) list,
        params : symbol list
      }

  type definingFormatComment = 
      {
        primaryTag : FormatTemplate.formattag,
        localTags : FormatTemplate.formattag list
      }

  datatype eq 
    = EQ
    | NONEQ

  datatype ty
    = TYWILD of loc
    | TYID of {symbol:symbol, eq:eq} * loc
    | TYRECORD of (string * ty) list * loc
    | TYCONSTRUCT of ty list * longsymbol * loc
    | TYTUPLE of ty list * loc
    | TYFUN of ty * ty * loc
    | TYPOLY of ({symbol:symbol, eq:eq} * tvarKind) list * ty * loc

  and tvarKind 
   = UNIV 
   | REC of (string * ty) list * loc

  type tvar = {symbol:symbol, eq:eq}
  type kindedTvar = {symbol:symbol, eq:eq} * tvarKind

  datatype ffiTy 
    = FFIFUNTY of string list * ffiTy list * ffiTy list option * ffiTy list * loc
    | FFITUPLETY of ffiTy list * loc
    | FFITYVAR of tvar * loc
    | FFIRECORDTY of (string * ffiTy) list * loc
    | FFICONTY of ffiTy list * longsymbol * loc

  datatype pat
    = PATWILD of loc
    | PATCONSTANT of constant
    | PATID of {opPrefix:bool, longsymbol:longsymbol, loc:loc}
    | PATRECORD of {ifFlex:bool, fields:patrow list, loc:loc}
    | PATTUPLE of pat list * loc
    | PATLIST of pat list * loc
    | PATAPPLY of pat list * loc
    | PATTYPED of pat * ty * loc
    | PATLAYERED of pat * pat * loc
  and patrow 
    = PATROWPAT of string * pat * loc
    | PATROWVAR of string * (ty option) * (pat option) * loc

  datatype exbind 
    = EXBINDDEF of {opFlag:bool, 
                     conSymbol:symbol, 
                     tyOpt:ty option,
                     loc:loc,
                     formatComments:definingFormatComment list}
     | EXBINDREP of {opFlag1:bool,
                     conSymbol:symbol, 
                     refLongsymbol:longsymbol,
                     opFlag2:bool,
                     loc:loc,
                     formatComments:definingFormatComment list}
  type typbind 
    = {
        tyvars : tvar list,
        tyConSymbol : symbol,
        ty : ty,
        formatComments : definingFormatComment list
      }

  type datbind 
    = {
       tyvars : tvar list, 
       tyConSymbol:symbol, 
       rhs : {opFlag:bool, 
              conSymbol:symbol, 
              tyOpt:ty option, 
              formatComments:definingFormatComment list} 
               list
      }

  datatype exp
    = EXPCONSTANT of constant
    | EXPID of  longsymbol
    | EXPOPID of longsymbol * loc
    | EXPRECORD of (string * exp) list * loc
    | EXPRECORD_UPDATE of exp * (string * exp) list * loc
    | EXPRECORD_SELECTOR of symbol * loc
    | EXPTUPLE of exp list * loc
    | EXPLIST of exp list * loc
    | EXPSEQ of exp list * loc
    | EXPAPP of exp list * loc
    | EXPTYPED of exp * ty * loc
    | EXPCONJUNCTION of exp * exp * loc
    | EXPDISJUNCTION of exp * exp * loc
    | EXPHANDLE of exp * (pat * exp) list * loc
    | EXPRAISE of exp * loc
    | EXPIF of exp * exp * exp * loc
    | EXPWHILE of exp * exp * loc
    | EXPCASE of exp * (pat * exp) list * loc
    | EXPFN of (pat * exp) list * loc
    | EXPLET of dec list * exp list * loc
    | EXPFFIIMPORT of ffiFun * ffiTy * loc
    | EXPFFIAPPLY of string list * ffiFun * ffiArg list * ffiTy list * loc
    | EXPSQL of (exp, pat, ty) AbsynSQL.exp * loc
    | EXPJOIN of exp * exp * loc
  and ffiArg 
    = FFIARG of exp * ffiTy * loc
    | FFIARGSIZEOF of ty * exp option * loc
  and ffiFun
    = FFIFUN of exp
    | FFIEXTERN of string
  and dec 
    = DECVAL of kindedTvar list * (pat * exp) list * loc
    | DECREC of kindedTvar list * (pat * exp) list * loc
    | DECPOLYREC of (symbol * ty * exp) list * loc
    | DECFUN of kindedTvar list * {fdecl:(pat list * ty option * exp) list, loc:loc} list * loc 
    | DECTYPE of {formatComments : headerFormatComment list, tbs : typbind list, loc:loc}
    | DECDATATYPE of {formatComments: headerFormatComment list,
                      datatys: datbind list,
                      withtys: typbind list,
                      loc:loc}
    | DECABSTYPE of 
            {
             formatComments : headerFormatComment list,
             abstys: datbind list,
             withtys: typbind list,
             body: dec list,
             loc:loc
            }
    | DECOPEN of longsymbol list * loc
    | DECREPLICATEDAT of {formatComments: headerFormatComment list,
                          defSymbol: symbol,
                          refLongsymbol: longsymbol,
                          loc:loc}
    | DECEXN of {formatComments:headerFormatComment list,
                 exbinds:exbind list,
                 loc:loc}
    | DECLOCAL of dec list * dec list * loc
    | DECINFIX of string * symbol list * loc
    | DECINFIXR of string * symbol list * loc
    | DECNONFIX of symbol list * loc
  and strdec 
    = COREDEC of dec * loc
    | STRUCTBIND of strbind list * loc
    | STRUCTLOCAL of strdec  list * strdec list  * loc
  and strexp 
    = STREXPBASIC of strdec list * loc
    | STRID of longsymbol * loc
    | STRTRANCONSTRAINT of strexp * sigexp * loc
    | STROPAQCONSTRAINT of strexp * sigexp * loc
    | FUNCTORAPP of symbol * strexp * loc
    | STRUCTLET  of strdec list * strexp * loc
  and strbind 
    = STRBINDTRAN of symbol * sigexp  * strexp * loc 
    | STRBINDOPAQUE of symbol * sigexp  * strexp * loc
    | STRBINDNONOBSERV of symbol * strexp * loc
  and sigexp 
    = SIGEXPBASIC of spec * loc
    | SIGID of symbol * loc
    | SIGWHERE of sigexp * (tvar list * longsymbol * ty) * loc
  and spec
    = SPECVAL of (symbol * ty) list * loc
    | SPECTYPE of (tvar list * symbol) list * loc
    | SPECDERIVEDTYPE of (tvar list * symbol * ty) list  * loc
    | SPECEQTYPE of (tvar list * symbol) list * loc
    | SPECDATATYPE of (tvar list * symbol * (symbol * ty option) list ) list * loc
    | SPECREPLIC of symbol * longsymbol * loc
    | SPECEXCEPTION of (symbol * ty option) list * loc
    | SPECSTRUCT of (symbol * sigexp) list * loc
    | SPECINCLUDE of sigexp * loc
    | SPECDERIVEDINCLUDE of symbol list * loc
    | SPECSEQ of spec * spec * loc 
    | SPECSHARE of spec * longsymbol list * loc 
    | SPECSHARESTR of spec * longsymbol list * loc 
    | SPECEMPTY 
  and funbind 
    = FUNBINDTRAN of symbol * symbol * sigexp  * sigexp * strexp * loc 
    | FUNBINDOPAQUE of symbol * symbol * sigexp  * sigexp * strexp * loc 
    | FUNBINDNONOBSERV of symbol * symbol * sigexp  * strexp * loc 
    | FUNBINDSPECTRAN of symbol * spec * sigexp  * strexp * loc 
    | FUNBINDSPECOPAQUE of symbol * spec * sigexp  * strexp * loc 
    | FUNBINDSPECNONOBSERV of symbol * spec * strexp * loc 
  and topdec 
    = TOPDECSTR of strdec * loc
    | TOPDECSIG of ( symbol * sigexp ) list * loc 
    | TOPDECFUN of funbind list * loc

  datatype top 
    = TOPDEC of topdec list
    | USE of Symbol.symbol

  datatype interface 
    = INTERFACE of Symbol.symbol
    | NOINTERFACE

  type unit = 
    {
     interface : interface,
     tops : top list,
     loc : loc
    }

  datatype unitparseresult
    = UNIT of unit
    | EOF

  val getLeftLocConstant : constant -> Loc.pos
  val getRightLocConstant : constant -> Loc.pos
  val getLocConstant : constant -> Loc.loc

  val getLocTy : ty -> Loc.loc
  val getLocPat : pat -> Loc.loc
  val replaceLoc : exp * Loc.loc -> exp

  val format_constant
      : constant -> SMLFormat.FormatExpression.expression list
  val format_eq
      : eq -> SMLFormat.FormatExpression.expression list
  val format_ty
      : ty -> SMLFormat.FormatExpression.expression list
  val format_tvarKind
      : tvarKind -> SMLFormat.FormatExpression.expression list
  val format_tvar
      : tvar -> SMLFormat.FormatExpression.expression list
  val format_kindedTvar
      : kindedTvar -> SMLFormat.FormatExpression.expression list
  val format_ffiTy
      : ffiTy -> SMLFormat.FormatExpression.expression list
  val format_pat
      : pat -> SMLFormat.FormatExpression.expression list
  val format_patrow
      : patrow -> SMLFormat.FormatExpression.expression list
  val format_typbind
      : typbind -> SMLFormat.FormatExpression.expression list
  val format_exp
      : exp -> SMLFormat.FormatExpression.expression list
  val format_dec
      : dec -> SMLFormat.FormatExpression.expression list
  val format_sigexp
      : sigexp -> SMLFormat.FormatExpression.expression list
  val format_spec
      : spec -> SMLFormat.FormatExpression.expression list
  val format_topdec
      : topdec -> SMLFormat.FormatExpression.expression list
  val format_unit
      : unit -> SMLFormat.FormatExpression.expression list
  val format_unitparseresult
      : unitparseresult -> SMLFormat.FormatExpression.expression list

  val DefaultFormatterPrefix : string
end
