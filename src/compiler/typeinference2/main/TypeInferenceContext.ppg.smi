_require "basis.smi"
_require "smlformat-lib.smi"
_require "../../absyn/main/Absyn.ppg.smi"
_require "../../control/main/Loc.ppg.smi"
_require "../../name/main/LocalID.smi"
_require "../../typedcalc/main/TypedCalc.ppg.smi"
_require "../../types/main/IDCalc.ppg.smi"
_require "../../types/main/Types.ppg.smi"
_require "../../types/main/TypesBasics.smi"
_require "../../types/main/OPrimMap.smi"
_require "../../types/main/VarMap.smi"
_require "../../types/main/tvarMap.smi"
_require "../../util/main/TermFormat.smi"

structure TypeInferenceContext =
  struct
    type tvarEnv = Types.ty TvarMap.map
    val format_tvarEnv
        : {eqKind:Absyn.eq, tvarKind:Types.tvarKind} TermFormat.btvEnv' list
          -> Types.ty TvarMap.map
          -> SMLFormat.FormatExpression.expression list
    type varEnv = TypedCalc.idstatus VarMap.map
    val format_varEnv
        : varEnv -> SMLFormat.BasicFormatters.expression list
    type oprimEnv = Types.oprimInfo OPrimMap.map
    val format_oprimEnv
        : oprimEnv -> SMLFormat.BasicFormatters.expression list
    type context = {oprimEnv:oprimEnv, tvarEnv:tvarEnv, varEnv:varEnv}
    val format_context
        : context -> SMLFormat.FormatExpression.expression list
    val emptyContext : context
    val bindVar
        : int * context
          * IDCalc.varInfo
          * TypedCalc.idstatus
          -> context
    val bindOPrim : context * IDCalc.oprimInfo * Types.oprimInfo -> context
    val extendContextWithVarEnv : context * varEnv -> context
    val extendContextWithContext : context * context -> context
    val overrideContextWithTvarEnv : context * tvarEnv -> context
    val addUtvar
        : Types.lambdaDepth
          -> context
          -> (Types.utvar * IDCalc.tvarKind) list
          -> Loc.loc
          -> context * (Types.tvState ref * IDCalc.tvarKind) TvarMap.map
  end
