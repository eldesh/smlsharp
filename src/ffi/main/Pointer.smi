structure Pointer =
struct
  val advance = SMLSharp_Builtin.Pointer.advance

  val load =
      case 'a in 'a ptr -> 'a of
        int => SMLSharp_Builtin.Pointer.deref
      | word => SMLSharp_Builtin.Pointer.deref
      | SMLSharp_Builtin.Word8.word => SMLSharp_Builtin.Pointer.deref
      | char => SMLSharp_Builtin.Pointer.deref
      | real => SMLSharp_Builtin.Pointer.deref
      | SMLSharp_Builtin.Real32.real => SMLSharp_Builtin.Pointer.deref
      | 'b ptr => SMLSharp_Builtin.Pointer.deref

  val store =
      case 'a in 'a ptr * 'a -> unit of
        int => SMLSharp_Builtin.Pointer.store
      | word => SMLSharp_Builtin.Pointer.store
      | SMLSharp_Builtin.Word8.word => SMLSharp_Builtin.Pointer.store
      | char => SMLSharp_Builtin.Pointer.store
      | real => SMLSharp_Builtin.Pointer.store
      | SMLSharp_Builtin.Real32.real => SMLSharp_Builtin.Pointer.store
      | 'b ptr => SMLSharp_Builtin.Pointer.store

  val isNull : 'a ptr -> bool
  val NULL : unit -> 'a ptr

  val importBytes : SMLSharp_Builtin.Word8.word ptr * int
                    -> SMLSharp_Builtin.Word8.word vector
  val importString : char ptr -> string
end
